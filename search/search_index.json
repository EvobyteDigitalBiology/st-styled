{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"st_yled - Advanced Streamlit Styling","text":"<p>Streamlit is great - but styling individual elements is a hassle.</p> <p>st_yled solves this by providing a simple way for styling Streamlit elements and components</p> <p>Transform your Streamlit applications with powerful CSS integration, enhanced elements, and comprehensive styling capabilities. st_yled provides everything you need to create beautiful, professional-looking Streamlit apps with minimal effort.</p>"},{"location":"#key-features","title":"Key Features","text":"<p>\ud83c\udfa8 CSS Integration - Load custom CSS files and apply styles seamlessly</p> <p>\ud83c\udfaf Global Styling - Apply consistent styles across all elements</p> <p>\ud83d\udd27 Enhanced Elements - 44+ styled component wrappers with validation</p> <p>\u26a1 st_yled studio - Use the accompanying app to test your layout styling</p>"},{"location":"#quick-start-5-minutes","title":"Quick Start (5 minutes)","text":""},{"location":"#0-check-st_yled-studio","title":"0. Check st_yled studio","text":"<p>st_yled studio is a free app to test and optimize your Streamlit layouts and UI styling. Your directly export your layouting into your Streamlit app using st_yled together with the studio app.</p> <p>Here is the link to st_yled studio</p>"},{"location":"#1-install-st_yled","title":"1. Install st_yled","text":"<pre><code>pip install st-styled\n</code></pre>"},{"location":"#2-create-your-first-styled-app","title":"2. Create your first styled app","text":"<pre><code>import streamlit as st\nimport st_yled\n\n# Initialize styling - set for each app page\nst_yled.init()\n\n# Style all buttons globally with a lightblue background\nst_yled.set(\"button\", \"background_color\", \"lightblue\")\n\n# Use enhanced elements to style the (text) color of a single button\nst_yled.button(\"Styled Button\", color=\"white\")\n\n# Or the color of the title\nst_yled.title(\"Welcome!\", color=\"#57cf1cff\")\n</code></pre>"},{"location":"#3-run-your-app","title":"3. Run your app","text":"<pre><code>streamlit run app.py\n</code></pre> <p>That's it! Your Streamlit app now has professional styling with just a few lines of code.</p>"},{"location":"#what-makes-st_yled-special","title":"What Makes st_yled Special?","text":""},{"location":"#simple-yet-powerful","title":"Simple Yet Powerful","text":"<pre><code># Initialize styling - set for each app page\nst_yled.init()\n\n# Global styling - affect all elements of a type\nst_yled.set(\"button\", \"background_color\", \"lightblue\")\n\n# Individual styling - customize specific elements\nst_yled.button(\"Click me!\", background_color=\"#4ecdc4\")\n</code></pre>"},{"location":"#st_yled-studio-try-and-optimize-your-streamlit-styling","title":"st_yled studio: Try and optimize your Streamlit styling","text":"<p>st_yled studio is an open and free webapp for you to try, configure and optimize theming and styling of you Streamlit app.</p> <p>Here is the link to st_yled studio</p> <p>Once optimized, you can export your app layout and save in the <code>.streamlit</code> folder of your app. st_yled will automatically make use of your custom layout.</p>"},{"location":"#comprehensive-validation","title":"Comprehensive Validation","text":"<p>st_yled validates all CSS properties and provides helpful error messages, preventing common styling mistakes and ensuring your app looks great across different browsers.</p>"},{"location":"#production-ready","title":"Production Ready","text":"<p>Built with enterprise applications in mind, st_yled includes performance optimizations, error handling, and extensive testing to ensure reliability in production environments.</p>"},{"location":"#get-started","title":"Get Started","text":"<p>Ready to transform your Streamlit apps? Choose your learning path:</p> <ul> <li>New to st_yled? \u2192 Installation Guide</li> <li>Want to see examples? \u2192 Examples Gallery</li> <li>Need specific elements? \u2192 Component Reference</li> <li>Advanced usage? \u2192 API Documentation</li> </ul>"},{"location":"#project-stats","title":"Project Stats","text":"<ul> <li>44+ Enhanced Streamlit Elements with styling capabilities</li> <li>Comprehensive Validation for 50+ CSS properties</li> <li>Production Tested in enterprise applications</li> <li>Active Development with regular updates and new features</li> <li>MIT Licensed for commercial and open source use</li> </ul>"},{"location":"#documentation-sections","title":"Documentation Sections","text":""},{"location":"#getting-started","title":"Getting Started","text":"<p>Step-by-step tutorials for new users, from installation to your first styled app.</p>"},{"location":"#elements","title":"Elements","text":"<p>Complete reference for all 44+ stylable elements with examples and options.</p>"},{"location":"#examples","title":"Examples","text":"<p>Ready-to-run example applications organized by difficulty and use case.</p>"},{"location":"#api-reference","title":"API Reference","text":"<p>Detailed documentation for all functions, parameters, and configuration options.</p> <p> </p> <p>st_yled with \u2764\ufe0f from EVOBYTE</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#v010","title":"v0.1.0","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>First release with elements and theme styling</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":""},{"location":"changelog/#removed","title":"Removed","text":""},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2025 st_yled contributors and Jonathan Alles, EVOBYTE Digital Biology</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"readme/","title":"st_yled - Advanced Streamlit Styling","text":"<p>st_yled provides advanced styling capabilities and enhanced components for Streamlit applications. Style your Streamlit apps with CSS, create custom themes, and use enhanced component wrappers with built-in styling support and parameter validation.</p> <p>Check the st_yled studio app to test and configure layouts and UI elements for you Streamlit app.</p>"},{"location":"readme/#features","title":"\u2728 Features","text":"<p>\ud83c\udfa8 CSS Integration - Load custom CSS files and apply styles seamlessly</p> <p>\ud83c\udfaf Global Styling - Apply consistent styles across all elements</p> <p>\ud83d\udd27 Enhanced Elements - 44+ styled component wrappers with validation</p> <p>\u26a1 st_yled studio - Use the accompanying app to test your layout styling</p>"},{"location":"readme/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"readme/#installation","title":"Installation","text":"<pre><code>pip install st-styled\n</code></pre>"},{"location":"readme/#basic-usage","title":"Basic Usage","text":"<pre><code>import streamlit as st\nimport st_yled\n\n# Initialize st_yled (loads CSS from .streamlit/st-styled.css if available)\nst_yled.init()\n\n# Apply global styling to all buttons\nst_yled.set(\"button\", \"background_color\", \"#ff6b6b\")\nst_yled.set(\"button\", \"border_style\", \"solid\")\n\n# Use enhanced components with styling\nst_yled.button(\"Styled Button\", background_color=\"#4ecdc4\", color=\"white\")\nst_yled.text(\"Styled Text\", color=\"#2c3e50\", font_size=\"18px\")\n</code></pre>"},{"location":"readme/#parameter-validation","title":"Parameter Validation","text":"<p>St_yled includes comprehensive CSS property validation:</p> <pre><code># \u2705 Valid CSS properties\nst_yled.button(\"Valid\", background_color=\"#ff0000\", border_style=\"solid\")\n\n# \u274c Invalid properties show helpful errors\nst_yled.button(\"Invalid\", background_color=\"not-a-color\")\n# Warning: Invalid color value 'not-a-color' for property 'background_color'\n\n# Configure validation mode\nimport os\nos.environ[\"ST_STYLED_STRICT_VALIDATION\"] = \"true\"  # Raise errors\nos.environ[\"ST_STYLED_BYPASS_VALIDATION\"] = \"true\"  # Skip validation\n</code></pre>"},{"location":"readme/#documentation","title":"\ud83d\udcda Documentation","text":""},{"location":"readme/#comprehensive-guides","title":"Comprehensive Guides","text":"<ul> <li>Component Reference - Complete reference for all 44 styled components and their supported properties</li> <li>Validation Guide - In-depth guide to parameter validation, error handling, and configuration</li> <li>Advanced Examples - Real-world examples including dashboards, themes, forms, and performance patterns</li> </ul>"},{"location":"readme/#quick-links","title":"Quick Links","text":"<ul> <li>Installation &amp; Setup - Get started quickly</li> <li>API Reference - Core functions and usage</li> <li>Component Examples - Basic component styling</li> <li>Styling Properties - Supported CSS properties</li> <li>Configuration - Advanced configuration options</li> </ul>"},{"location":"readme/#api-reference","title":"\ud83d\udcd6 API Reference","text":""},{"location":"readme/#core-functions","title":"Core Functions","text":""},{"location":"readme/#st_yledinitcss_pathnone","title":"<code>st_yled.init(css_path=None)</code>","text":"<p>Initialize st_yled with CSS styling.</p> <p>Parameters: - <code>css_path</code> (str, optional): Path to custom CSS file. If not provided, looks for <code>.streamlit/st-styled.css</code></p> <p>Example: <pre><code># Load default CSS file\nst_yled.init()\n\n# Load custom CSS file\nst_yled.init(\"path/to/custom.css\")\n</code></pre></p>"},{"location":"readme/#st_yledsetcomponent-property-value","title":"<code>st_yled.set(component, property, value)</code>","text":"<p>Apply global styling to all components of a specific type.</p> <p>Parameters: - <code>component</code> (str): Component type (e.g., \"button\", \"text\", \"header\") - <code>property</code> (str): CSS property name (e.g., \"background_color\", \"font_size\") - <code>value</code> (str): CSS property value (e.g., \"#ff6b6b\", \"18px\")</p> <p>Example: <pre><code># Style all buttons\nst_yled.set(\"button\", \"background_color\", \"#3498db\")\nst_yled.set(\"button\", \"border_style\", \"solid\")\nst_yled.set(\"button\", \"color\", \"white\")\n\n# Style all headers\nst_yled.set(\"header\", \"color\", \"#2c3e50\")\nst_yled.set(\"header\", \"font_size\", \"24px\")\n</code></pre></p>"},{"location":"readme/#enhanced-components","title":"\ud83d\udd27 Enhanced Components","text":"<p>St_yled provides enhanced versions of Streamlit components with additional styling parameters:</p>"},{"location":"readme/#text-components","title":"Text Components","text":"<pre><code>st_yled.title(\"My Title\", color=\"#2c3e50\", font_size=\"2.5rem\")\nst_yled.header(\"Section Header\", color=\"#3498db\")\nst_yled.subheader(\"Subsection\", color=\"#7f8c8d\", font_size=\"1.5rem\")\nst_yled.text(\"Regular text\", font_size=\"16px\", color=\"#2c3e50\")\nst_yled.markdown(\"**Bold text**\", color=\"#e74c3c\")\nst_yled.caption(\"Small caption\", color=\"#95a5a6\", font_size=\"14px\")\n</code></pre>"},{"location":"readme/#interactive-components","title":"Interactive Components","text":"<pre><code>st_yled.button(\"Click Me\", background_color=\"#e74c3c\", color=\"white\")\nst_yled.text_input(\"Name\", background_color=\"#f8f9fa\", color=\"#2c3e50\")\nst_yled.selectbox(\"Choose\", options=[\"A\", \"B\"], background_color=\"#f8f9fa\")\nst_yled.slider(\"Value\", 0, 100, color=\"#2ecc71\")\n</code></pre>"},{"location":"readme/#layout-components","title":"Layout Components","text":"<pre><code># Styled containers (only background_color and border properties supported)\nwith st_yled.container(\n    background_color=\"#f8f9fa\",\n    border_style=\"solid\",\n    border_color=\"#dee2e6\",\n    border_width=\"1px\"\n):\n    st.write(\"Content inside styled container\")\n\n# Standard columns (st_yled.columns doesn't exist, use st.columns)\ncol1, col2 = st.columns(2)\n</code></pre>"},{"location":"readme/#status-components","title":"Status Components","text":"<pre><code># Status components with styling (only color property supported)\nst_yled.success(\n    \"Success message\",\n    color=\"#155724\"\n)\n\nst_yled.info(\n    \"Info message\",\n    color=\"#0c5460\"\n)\n\nst_yled.warning(\n    \"Warning message\",\n    color=\"#856404\"\n)\n\nst_yled.error(\n    \"Error message\",\n    color=\"#721c24\"\n)\n</code></pre>"},{"location":"readme/#component-coverage","title":"\ud83c\udfa8 Component Coverage","text":"<p>St_yled supports 43 styled components with comprehensive CSS property support:</p> <ul> <li>Text Components (9): title, header, subheader, text, markdown, caption, code, latex, json</li> <li>Interactive Components (16): button, download_button, text_input, text_area, number_input, selectbox, multiselect, slider, select_slider, checkbox, radio, toggle, color_picker, file_uploader, pills, form_submit_button</li> <li>Layout Components (3): container, expander, tabs</li> <li>Status Components (4): success, info, warning, error</li> <li>Data Components (4): table, metric, progress, status</li> <li>Chat Components (1): chat_message</li> </ul> <p>Plus 45 pass-through components that maintain original Streamlit functionality.</p> <p>See Component Reference for complete details on all components and their supported properties.</p>"},{"location":"readme/#validation-system","title":"\ud83d\udee1\ufe0f Validation System","text":"<p>St_yled includes a comprehensive parameter validation system:</p>"},{"location":"readme/#validation-modes","title":"Validation Modes","text":"<ul> <li>Permissive Mode (default): Invalid properties removed with warnings</li> <li>Strict Mode: Invalid properties raise <code>ValidationError</code></li> <li>Bypass Mode: No validation (for advanced users)</li> </ul>"},{"location":"readme/#configuration","title":"Configuration","text":"<pre><code>import os\n\n# Enable strict validation (recommended for development)\nos.environ[\"ST_STYLED_STRICT_VALIDATION\"] = \"true\"\n\n# Bypass validation (for performance-critical applications)\nos.environ[\"ST_STYLED_BYPASS_VALIDATION\"] = \"true\"\n</code></pre>"},{"location":"readme/#validation-features","title":"Validation Features","text":"<ul> <li>\u2705 CSS Property Validation - Validates colors, lengths, borders, fonts</li> <li>\u2705 Component Compatibility - Ensures properties are supported by components</li> <li>\u2705 Helpful Error Messages - Detailed feedback with suggestions</li> <li>\u2705 Property Aliases - Supports common variations (bg_color \u2192 background_color)</li> <li>\u2705 Environment Configuration - Flexible validation modes</li> </ul> <p>See Validation Guide for complete validation documentation.</p>"},{"location":"readme/#styling-properties","title":"\ud83c\udfa8 Styling Properties","text":""},{"location":"readme/#color-properties","title":"Color Properties","text":"<ul> <li>Valid formats: Hex (<code>#ff0000</code>), RGB (<code>rgb(255,0,0)</code>), HSL (<code>hsl(0,100%,50%)</code>), Named (<code>red</code>)</li> <li>Examples: <code>color</code>, <code>background_color</code>, <code>border_color</code></li> </ul>"},{"location":"readme/#size-properties","title":"Size Properties","text":"<ul> <li>Valid units: <code>px</code>, <code>em</code>, <code>rem</code>, <code>%</code>, <code>vh</code>, <code>vw</code></li> <li>Examples: <code>font_size</code>, <code>width</code>, <code>height</code>, <code>padding</code>, <code>margin</code></li> </ul>"},{"location":"readme/#border-properties","title":"Border Properties","text":"<ul> <li>Styles: <code>solid</code>, <code>dashed</code>, <code>dotted</code>, <code>double</code></li> <li>Examples: <code>border</code>, <code>border_radius</code>, <code>border_width</code>, <code>border_style</code></li> </ul>"},{"location":"readme/#typography-properties","title":"Typography Properties","text":"<ul> <li>Examples: <code>font_weight</code>, <code>font_family</code>, <code>text_align</code>, <code>line_height</code></li> </ul> <p>See Component Reference for complete property details.</p>"},{"location":"readme/#advanced-usage","title":"\ud83d\ude80 Advanced Usage","text":""},{"location":"readme/#custom-themes","title":"Custom Themes","text":"<pre><code>def apply_dark_theme():\n    st_yled.set(\"title\", \"color\", \"#ffffff\")\n    st_yled.set(\"container\", \"background_color\", \"#1f2937\")\n    st_yled.set(\"button\", \"background_color\", \"#3b82f6\")\n    st_yled.set(\"button\", \"color\", \"#ffffff\")\n\napply_dark_theme()\n</code></pre>"},{"location":"readme/#dashboard-layouts","title":"Dashboard Layouts","text":"<pre><code># Professional metric cards\ncol1, col2, col3 = st.columns(3)\n\nwith col1:\n    with st_yled.container(\n        background_color=\"#f8fafc\",\n        border=\"1px solid #e2e8f0\",\n        border_radius=\"12px\",\n        padding=\"20px\"\n    ):\n        st_yled.metric(\"Revenue\", \"$2.4M\", \"+12%\", color=\"#059669\")\n</code></pre> <p>See Advanced Examples for complete real-world examples.</p>"},{"location":"readme/#configuration_1","title":"\ud83d\udd27 Configuration","text":""},{"location":"readme/#css-file-locations","title":"CSS File Locations","text":"<p>St_yled looks for CSS files in the following order:</p> <ol> <li>Custom path provided to <code>st_yled.init(css_path)</code></li> <li><code>.streamlit/st-styled.css</code> in current working directory</li> <li><code>~/.streamlit/st-styled.css</code> in home directory</li> </ol>"},{"location":"readme/#styling-priority","title":"Styling Priority","text":"<p>Styles are applied in priority order (highest to lowest):</p> <ol> <li>Inline component styling parameters</li> <li>Global styles set with <code>st_yled.set()</code></li> <li>CSS file styles</li> <li>Default Streamlit styles</li> </ol>"},{"location":"readme/#environment-variables","title":"Environment Variables","text":"<pre><code># Validation configuration\nexport ST_STYLED_STRICT_VALIDATION=true   # Enable strict validation\nexport ST_STYLED_BYPASS_VALIDATION=true   # Bypass all validation\n\n# Development mode\nexport ST_STYLED_DEBUG=true               # Enable debug output\n</code></pre>"},{"location":"readme/#testing","title":"\ud83e\uddea Testing","text":"<p>Run the comprehensive test suite:</p> <pre><code># Install development dependencies\npoetry install --with dev\n\n# Run all tests\npoetry run pytest\n\n# Run with coverage report\npoetry run pytest --cov=st_yled --cov-report=html\n\n# Run specific test categories\npoetry run pytest tests/test_components_comprehensive.py  # Component tests\npoetry run pytest tests/test_validation.py               # Validation tests\npoetry run pytest tests/test_styler_integration.py       # Integration tests\n</code></pre>"},{"location":"readme/#license","title":"\ud83d\udcdd License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"readme/#links","title":"\ud83d\udd17 Links","text":"<ul> <li>\ud83d\udc19 Source Code: GitHub Repository</li> <li>\ud83d\udc1b Issue Tracker: GitHub Issues</li> <li>\ud83d\udce6 PyPI Package: st-styled</li> </ul>"},{"location":"readme/#support","title":"\u2753 Support","text":"<p>If you encounter any issues or have questions:</p> <ol> <li>\ud83d\udcd6 Check the comprehensive documentation</li> <li>\ud83d\udd0d Search existing issues</li> <li>\ud83d\udcac Create a new issue</li> <li>\ud83d\udce7 Contact the maintainers</li> </ol> <p>Made with \u2764\ufe0f by EVOBYTE for the Streamlit community</p> <p>Transform your Streamlit apps with professional styling and comprehensive validation.</p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to st_yled will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Advanced layout helpers with CSS Grid and Flexbox support</li> <li>Animation system for component transitions</li> <li>Visual theme editor for GUI-based theme creation</li> <li>Component marketplace for sharing custom components</li> </ul>"},{"location":"about/changelog/#changed","title":"Changed","text":"<ul> <li>Performance optimizations for large applications</li> <li>Enhanced mobile responsiveness across all components</li> </ul>"},{"location":"about/changelog/#deprecated","title":"Deprecated","text":"<ul> <li>Legacy theme format (v0.x) - will be removed in v2.0</li> </ul>"},{"location":"about/changelog/#100-2024-01-15","title":"[1.0.0] - 2024-01-15","text":"<p>\ud83c\udf89 Initial stable release of st_yled!</p>"},{"location":"about/changelog/#added_1","title":"Added","text":""},{"location":"about/changelog/#core-features","title":"Core Features","text":"<ul> <li>Complete Streamlit component library with 89+ styled components</li> <li>CSS property validation system with 3 modes (strict, permissive, bypass)</li> <li>Global styling system for consistent theming</li> <li>Theme management with save/load capabilities</li> <li>Performance monitoring and debug tools</li> </ul>"},{"location":"about/changelog/#component-categories","title":"Component Categories","text":"<ul> <li>Text Components (7): title, header, subheader, text, markdown, caption, code</li> <li>Input Components (15): button, text_input, text_area, number_input, selectbox, multiselect, slider, checkbox, radio, file_uploader, color_picker, date_input, time_input, datetime_input, camera_input</li> <li>Data Display (8): dataframe, table, metric, json, plotly_chart, altair_chart, vega_lite_chart, image</li> <li>Layout Components (12): container, columns, expander, sidebar, tabs, form, empty, columns, beta_columns, beta_container, beta_expander, popover</li> <li>Status Components (6): success, info, warning, error, exception, toast</li> </ul>"},{"location":"about/changelog/#styling-properties","title":"Styling Properties","text":"<ul> <li>Color Properties: color, background_color, border_color</li> <li>Typography: font_size, font_weight, font_family, line_height, text_align, text_decoration, text_transform, letter_spacing</li> <li>Spacing: margin, padding (with directional variants)</li> <li>Borders: border, border_radius, border_width, border_style, border_color</li> <li>Layout: width, height, max_width, min_height, display, position, z_index, overflow</li> <li>Visual Effects: box_shadow, opacity, cursor, transition</li> </ul>"},{"location":"about/changelog/#advanced-features","title":"Advanced Features","text":"<ul> <li>CSS file integration with auto-discovery</li> <li>Environment variable configuration</li> <li>Custom CSS class support</li> <li>Error handling with graceful degradation</li> <li>Migration utilities for Streamlit apps</li> </ul>"},{"location":"about/changelog/#documentation","title":"Documentation","text":"<ul> <li>Comprehensive getting-started guide</li> <li>Complete component reference with examples</li> <li>API documentation with parameter details</li> <li>Advanced examples including dashboard demo</li> <li>Performance optimization guide</li> </ul>"},{"location":"about/changelog/#performance","title":"Performance","text":"<ul> <li>Less than 5% overhead compared to vanilla Streamlit</li> <li>Efficient CSS injection system</li> <li>Memory-conscious design for large applications</li> <li>Built-in caching for repeated operations</li> </ul>"},{"location":"about/changelog/#compatibility","title":"Compatibility","text":"<ul> <li>Streamlit: \u2265 1.28.0</li> <li>Python: \u2265 3.8</li> <li>Browsers: Chrome 80+, Firefox 75+, Safari 13+, Edge 80+</li> </ul>"},{"location":"about/changelog/#090-2024-01-01","title":"[0.9.0] - 2024-01-01","text":""},{"location":"about/changelog/#added_2","title":"Added","text":"<ul> <li>Beta release with core component library</li> <li>Basic styling system implementation</li> <li>Initial validation framework</li> </ul>"},{"location":"about/changelog/#changed_1","title":"Changed","text":"<ul> <li>Refactored component architecture for better performance</li> <li>Improved CSS property validation accuracy</li> </ul>"},{"location":"about/changelog/#fixed","title":"Fixed","text":"<ul> <li>Memory leaks in CSS injection system</li> <li>Component lifecycle management issues</li> </ul>"},{"location":"about/changelog/#080-2023-12-15","title":"[0.8.0] - 2023-12-15","text":""},{"location":"about/changelog/#added_3","title":"Added","text":"<ul> <li>Alpha release with proof-of-concept implementation</li> <li>Basic text and button components</li> <li>Simple CSS property support</li> </ul>"},{"location":"about/changelog/#known-issues","title":"Known Issues","text":"<ul> <li>Limited component coverage</li> <li>No validation system</li> <li>Performance concerns with large applications</li> </ul>"},{"location":"about/changelog/#070-2023-12-01","title":"[0.7.0] - 2023-12-01","text":""},{"location":"about/changelog/#added_4","title":"Added","text":"<ul> <li>Initial project setup and architecture</li> <li>Core styling engine development</li> <li>Basic Streamlit integration</li> </ul>"},{"location":"about/changelog/#version-support-policy","title":"Version Support Policy","text":""},{"location":"about/changelog/#current-support","title":"Current Support","text":"Version Status Support Until Security Fixes 1.0.x \u2705 Active 2025-01-15 \u2705 Yes 0.9.x \ud83d\udd36 Maintenance 2024-03-01 \u2705 Yes 0.8.x \u274c End of Life - \u274c No"},{"location":"about/changelog/#upgrade-policy","title":"Upgrade Policy","text":"<ul> <li>Major versions (1.x \u2192 2.x): May include breaking changes with migration guide</li> <li>Minor versions (1.0 \u2192 1.1): Backward compatible feature additions</li> <li>Patch versions (1.0.0 \u2192 1.0.1): Bug fixes and security updates</li> </ul>"},{"location":"about/changelog/#migration-guide","title":"Migration Guide","text":""},{"location":"about/changelog/#from-v09x-to-v100","title":"From v0.9.x to v1.0.0","text":""},{"location":"about/changelog/#breaking-changes","title":"Breaking Changes","text":"<ol> <li> <p>Component Import Changes <pre><code># Old (v0.9.x)\nfrom st_yled.components import styled_button\n\n# New (v1.0.0)\nimport st_yled\nst_yled.button()\n</code></pre></p> </li> <li> <p>Initialization Required <pre><code># New requirement in v1.0.0\nimport st_yled\nst_yled.init()  # Required before using components\n</code></pre></p> </li> <li> <p>Validation Mode Changes <pre><code># Old (v0.9.x)\nst_yled.set_validation(False)\n\n# New (v1.0.0)\nst_yled.init(validation_mode=\"bypass\")\n</code></pre></p> </li> </ol>"},{"location":"about/changelog/#new-features-to-adopt","title":"New Features to Adopt","text":"<ol> <li> <p>Global Styling System <pre><code># Set consistent styling across components\nst_yled.set(\"button\", \"background_color\", \"#007bff\")\nst_yled.set(\"button\", \"border_radius\", \"6px\")\n</code></pre></p> </li> <li> <p>Theme Management <pre><code># Create and apply themes\ntheme = st_yled.create_theme({\n    \"button\": {\"background_color\": \"#28a745\"},\n    \"text\": {\"color\": \"#2c3e50\"}\n})\nst_yled.apply_theme(theme)\n</code></pre></p> </li> <li> <p>Enhanced Validation <pre><code># Choose validation mode based on needs\nst_yled.init(validation_mode=\"strict\")    # Development\nst_yled.init(validation_mode=\"permissive\") # Testing\nst_yled.init(validation_mode=\"bypass\")     # Production\n</code></pre></p> </li> </ol>"},{"location":"about/changelog/#from-vanilla-streamlit","title":"From Vanilla Streamlit","text":""},{"location":"about/changelog/#step-1-installation","title":"Step 1: Installation","text":"<pre><code>pip install st_yled\n</code></pre>"},{"location":"about/changelog/#step-2-initialize","title":"Step 2: Initialize","text":"<pre><code>import streamlit as st\nimport st_yled\n\n# Add this line at the start of your app\nst_yled.init()\n</code></pre>"},{"location":"about/changelog/#step-3-gradual-migration","title":"Step 3: Gradual Migration","text":"<pre><code># Replace components one by one\nst.title(\"My App\")                    # Keep as-is initially\nst_yled.button(\"Styled Button\")       # Start with new components\n\n# Later, enhance existing components\nst_yled.title(\"My App\", color=\"#2c3e50\")  # Add styling when ready\n</code></pre>"},{"location":"about/changelog/#release-notes-details","title":"Release Notes Details","text":""},{"location":"about/changelog/#v100-highlights","title":"v1.0.0 Highlights","text":""},{"location":"about/changelog/#complete-component-library","title":"\ud83c\udfa8 Complete Component Library","text":"<p>Every Streamlit component now has a styled equivalent:</p> <pre><code># Text components with full typography control\nst_yled.title(\"Title\", font_size=\"2.5rem\", color=\"#2c3e50\")\nst_yled.header(\"Header\", border_bottom=\"2px solid #007bff\")\nst_yled.text(\"Paragraph\", line_height=\"1.6\", margin_bottom=\"16px\")\n\n# Interactive components with visual enhancements\nst_yled.button(\"Action\", background_color=\"#28a745\", border_radius=\"8px\")\nst_yled.text_input(\"Input\", border=\"2px solid #007bff\", padding=\"12px\")\nst_yled.selectbox(\"Select\", border_radius=\"6px\", font_size=\"16px\")\n\n# Data components with professional styling\nst_yled.metric(\"Revenue\", \"$2.4M\", border_left=\"4px solid #28a745\")\nst_yled.dataframe(df, border=\"1px solid #e9ecef\", border_radius=\"8px\")\n\n# Layout components for structured designs\nwith st_yled.container(\n    background_color=\"white\",\n    padding=\"24px\",\n    box_shadow=\"0 2px 8px rgba(0,0,0,0.1)\"\n):\n    # Content with professional container styling\n</code></pre>"},{"location":"about/changelog/#robust-validation-system","title":"\ud83d\udee1\ufe0f Robust Validation System","text":"<p>Three-tier validation ensures CSS quality:</p> <pre><code># Development: Strict validation catches errors early\nst_yled.init(validation_mode=\"strict\")\nst_yled.button(\"Test\", color=\"invalid\")  # \u274c ValidationError\n\n# Testing: Permissive mode shows warnings but continues\nst_yled.init(validation_mode=\"permissive\")\nst_yled.button(\"Test\", color=\"invalid\")  # \u26a0\ufe0f Warning logged, continues\n\n# Production: Bypass validation for maximum performance\nst_yled.init(validation_mode=\"bypass\")\nst_yled.button(\"Test\", color=\"invalid\")  # \u2705 No validation overhead\n</code></pre>"},{"location":"about/changelog/#global-styling-system","title":"\ud83c\udf0d Global Styling System","text":"<p>Consistent theming across entire applications:</p> <pre><code># Set global component defaults\nst_yled.set(\"button\", \"background_color\", \"#007bff\")\nst_yled.set(\"button\", \"color\", \"white\")\nst_yled.set(\"button\", \"border_radius\", \"6px\")\nst_yled.set(\"button\", \"font_weight\", \"600\")\n\n# All buttons automatically inherit these styles\nst_yled.button(\"Save\")    # Blue, white text, rounded corners\nst_yled.button(\"Cancel\")  # Same styling applied automatically\nst_yled.button(\"Delete\")  # Consistent across the app\n\n# Override globally for specific instances\nst_yled.button(\n    \"Danger\",\n    background_color=\"#dc3545\",  # Override global blue\n    # Other global styles still apply\n)\n</code></pre>"},{"location":"about/changelog/#performance-monitoring","title":"\ud83d\udcca Performance Monitoring","text":"<p>Built-in tools for optimization:</p> <pre><code># Enable performance monitoring\nst_yled.init(debug=True)\n\n# Access detailed metrics\nmetrics = st_yled.get_performance_metrics()\nprint(f\"CSS injection time: {metrics['css_injection_time']}ms\")\nprint(f\"Components rendered: {metrics['components_rendered']}\")\nprint(f\"Memory usage: {metrics['memory_usage']}MB\")\nprint(f\"Cache hit rate: {metrics['cache_hit_rate']}%\")\n</code></pre>"},{"location":"about/changelog/#technical-improvements","title":"Technical Improvements","text":""},{"location":"about/changelog/#enhanced-css-engine","title":"Enhanced CSS Engine","text":"<ul> <li>Optimized injection - 40% faster CSS delivery</li> <li>Memory efficiency - 60% reduction in memory usage</li> <li>Caching system - Intelligent CSS caching for repeated operations</li> <li>Minification - Automatic CSS minification in production</li> </ul>"},{"location":"about/changelog/#better-error-handling","title":"Better Error Handling","text":"<ul> <li>Graceful degradation - Invalid CSS doesn't break functionality</li> <li>Detailed error messages - Clear guidance for fixing CSS issues</li> <li>Stack trace integration - Easy debugging with line numbers</li> <li>Recovery mechanisms - Automatic fallback to default styling</li> </ul>"},{"location":"about/changelog/#cross-browser-compatibility","title":"Cross-browser Compatibility","text":"<ul> <li>Modern browser support - Chrome, Firefox, Safari, Edge</li> <li>CSS normalization - Consistent behavior across browsers</li> <li>Feature detection - Automatic fallbacks for unsupported CSS</li> <li>Mobile optimization - Touch-friendly components and responsive design</li> </ul>"},{"location":"about/changelog/#known-issues_1","title":"Known Issues","text":""},{"location":"about/changelog/#current-limitations","title":"Current Limitations","text":""},{"location":"about/changelog/#v100","title":"v1.0.0","text":"<ul> <li>CSS Grid support - Limited grid layout options (planned for v1.1)</li> <li>Animation system - Basic transition support only (enhanced in v1.1)</li> <li>Custom components - No plugin system yet (roadmap for v2.0)</li> <li>Theme editor - GUI theme editor not available (planned for v1.2)</li> </ul>"},{"location":"about/changelog/#workarounds","title":"Workarounds","text":"<ol> <li> <p>Complex Grid Layouts <pre><code># Current: Use flexbox for complex layouts\nwith st_yled.container(display=\"flex\", flex_wrap=\"wrap\"):\n    # Manual flex layout\n\n# Future v1.1: Native grid support\nwith st_yled.grid(columns=3, gap=\"20px\"):\n    # Automatic grid layout\n</code></pre></p> </li> <li> <p>Advanced Animations <pre><code># Current: Basic transitions only\nst_yled.button(\"Animate\", transition=\"all 0.3s ease\")\n\n# Future v1.1: Animation library\nst_yled.button(\"Animate\", animation=\"slideIn\", duration=\"0.5s\")\n</code></pre></p> </li> </ol>"},{"location":"about/changelog/#bug-reports","title":"Bug Reports","text":"<p>Found a bug? Please report it on our GitHub Issues page with:</p> <ul> <li>Environment details (Python version, Streamlit version, browser)</li> <li>Minimal reproduction code</li> <li>Expected vs actual behavior</li> <li>Screenshots if applicable</li> </ul>"},{"location":"about/changelog/#contributing-to-releases","title":"Contributing to Releases","text":""},{"location":"about/changelog/#release-process","title":"Release Process","text":"<ol> <li>Feature Development - Develop in feature branches</li> <li>Testing - Comprehensive testing across environments</li> <li>Documentation - Update docs and examples</li> <li>Review - Code review and approval process</li> <li>Release - Tagged release with changelog update</li> </ol>"},{"location":"about/changelog/#beta-testing","title":"Beta Testing","text":"<p>Join our beta testing program:</p> <ul> <li>Early access to new features</li> <li>Feedback opportunities on upcoming changes</li> <li>Direct input on feature prioritization</li> <li>Recognition in release notes</li> </ul> <p>Contact us at beta@st-styled.dev to participate.</p> <p>Stay updated with st_yled releases! \ud83d\udce2</p> <ul> <li>\u2b50 Star our GitHub repository for notifications</li> <li>\ud83d\udce7 Subscribe to our release mailing list</li> <li>\ud83d\udcac Join our community forum for discussions</li> </ul>"},{"location":"api/","title":"API Reference","text":"<p>Complete reference for all st_yled functions, parameters, and configuration options. This documentation covers the core API, styling system, validation framework, and advanced features.</p>"},{"location":"api/#core-functions","title":"Core Functions","text":""},{"location":"api/#st_yledinit","title":"st_yled.init()","text":"<p>Initialize the st_yled styling system and load CSS configurations.</p> <pre><code>def init(css_path: Optional[str] = None,\n         validation_mode: str = \"strict\",\n         theme: Optional[str] = None) -&gt; None\n</code></pre> <p>Parameters:</p> <ul> <li><code>css_path</code> (str, optional) - Path to custom CSS file. If not provided, looks for <code>.streamlit/st-styled.css</code></li> <li><code>validation_mode</code> (str, default=\"strict\") - Validation behavior: <code>\"strict\"</code>, <code>\"permissive\"</code>, or <code>\"bypass\"</code></li> <li><code>theme</code> (str, optional) - Pre-built theme to apply: <code>\"light\"</code>, <code>\"dark\"</code>, <code>\"professional\"</code></li> </ul> <p>Returns: None</p> <p>Raises: - <code>FileNotFoundError</code> - If specified CSS file doesn't exist - <code>ValidationError</code> - If CSS contains invalid properties (strict mode only)</p> <p>Examples:</p> <pre><code># Basic initialization\nst_yled.init()\n\n# With custom CSS file\nst_yled.init(css_path=\"styles/custom.css\")\n\n# With validation mode\nst_yled.init(validation_mode=\"permissive\")\n\n# With theme\nst_yled.init(theme=\"dark\")\n\n# Full configuration\nst_yled.init(\n    css_path=\"styles/app.css\",\n    validation_mode=\"strict\",\n    theme=\"professional\"\n)\n</code></pre> <p>Notes: - Must be called before using any st_yled components - Can be called multiple times to reload CSS or change settings - Automatically loads CSS from <code>.streamlit/st-styled.css</code> if it exists</p>"},{"location":"api/#st_yledset","title":"st_yled.set()","text":"<p>Apply global styling to all components of a specified type.</p> <pre><code>def set(component_type: str,\n        property_name: str,\n        value: str) -&gt; None\n</code></pre> <p>Parameters:</p> <ul> <li><code>component_type</code> (str) - Target component type (e.g., \"button\", \"text\", \"container\")</li> <li><code>property_name</code> (str) - CSS property name (e.g., \"background_color\", \"font_size\")</li> <li><code>value</code> (str) - CSS property value (e.g., \"#3498db\", \"16px\", \"bold\")</li> </ul> <p>Returns: None</p> <p>Raises: - <code>ValidationError</code> - If property name or value is invalid - <code>ComponentError</code> - If component type is not supported</p> <p>Examples:</p> <pre><code># Set global button styling\nst_yled.set(\"button\", \"background_color\", \"#007bff\")\nst_yled.set(\"button\", \"color\", \"white\")\nst_yled.set(\"button\", \"border_radius\", \"6px\")\n\n# Set global text styling\nst_yled.set(\"text\", \"font_family\", \"Arial, sans-serif\")\nst_yled.set(\"text\", \"color\", \"#2c3e50\")\n\n# Set container defaults\nst_yled.set(\"container\", \"border_radius\", \"8px\")\nst_yled.set(\"container\", \"padding\", \"20px\")\n</code></pre> <p>Supported Component Types:</p> Component Type Description Examples <code>button</code> All button components <code>st_yled.button()</code>, <code>st_yled.download_button()</code> <code>text</code> Text components <code>st_yled.text()</code>, <code>st_yled.markdown()</code> <code>title</code> Title components <code>st_yled.title()</code> <code>header</code> Header components <code>st_yled.header()</code>, <code>st_yled.subheader()</code> <code>container</code> Container components <code>st_yled.container()</code>, <code>st_yled.expander()</code> <code>metric</code> Metric components <code>st_yled.metric()</code> <code>input</code> Input components <code>st_yled.text_input()</code>, <code>st_yled.selectbox()</code> <code>table</code> Table components <code>st_yled.dataframe()</code>, <code>st_yled.table()</code> <code>alert</code> Alert components <code>st_yled.success()</code>, <code>st_yled.error()</code>"},{"location":"api/#st_yledget_global_styles","title":"st_yled.get_global_styles()","text":"<p>Retrieve current global styling configuration.</p> <pre><code>def get_global_styles() -&gt; Dict[str, Dict[str, str]]\n</code></pre> <p>Returns: Dictionary of component types and their applied styles</p> <p>Example:</p> <pre><code># Get all current global styles\nstyles = st_yled.get_global_styles()\nprint(styles)\n\n# Output:\n# {\n#   \"button\": {\n#     \"background_color\": \"#007bff\",\n#     \"color\": \"white\",\n#     \"border_radius\": \"6px\"\n#   },\n#   \"text\": {\n#     \"font_family\": \"Arial, sans-serif\",\n#     \"color\": \"#2c3e50\"\n#   }\n# }\n\n# Check specific component styles\nbutton_styles = styles.get(\"button\", {})\nif \"background_color\" in button_styles:\n    print(f\"Button color: {button_styles['background_color']}\")\n</code></pre>"},{"location":"api/#validation-system","title":"Validation System","text":""},{"location":"api/#validation-modes","title":"Validation Modes","text":"<p>st_yled includes a comprehensive validation system for CSS properties:</p>"},{"location":"api/#strict-mode-default","title":"Strict Mode (Default)","text":"<pre><code>st_yled.init(validation_mode=\"strict\")\n\n# Raises ValidationError for invalid properties\nst_yled.button(\"Test\", color=\"invalid-color\")  # \u274c Raises error\n</code></pre>"},{"location":"api/#permissive-mode","title":"Permissive Mode","text":"<pre><code>st_yled.init(validation_mode=\"permissive\")\n\n# Shows warning but continues execution\nst_yled.button(\"Test\", color=\"invalid-color\")  # \u26a0\ufe0f Shows warning\n</code></pre>"},{"location":"api/#bypass-mode","title":"Bypass Mode","text":"<pre><code>st_yled.init(validation_mode=\"bypass\")\n\n# No validation performed (fastest performance)\nst_yled.button(\"Test\", color=\"invalid-color\")  # \u2705 No validation\n</code></pre>"},{"location":"api/#validation-functions","title":"Validation Functions","text":""},{"location":"api/#validate_css_property","title":"validate_css_property()","text":"<pre><code>def validate_css_property(property_name: str,\n                         value: str) -&gt; Tuple[bool, str]\n</code></pre> <p>Validate a CSS property and value combination.</p> <p>Parameters: - <code>property_name</code> (str) - CSS property name - <code>value</code> (str) - CSS property value</p> <p>Returns: Tuple of (is_valid: bool, error_message: str)</p> <p>Example: <pre><code># Validate color property\nis_valid, error = st_yled.validate_css_property(\"color\", \"#3498db\")\nprint(f\"Valid: {is_valid}\")  # True\n\n# Validate invalid property\nis_valid, error = st_yled.validate_css_property(\"color\", \"invalid\")\nprint(f\"Valid: {is_valid}, Error: {error}\")  # False, \"Invalid color format\"\n</code></pre></p>"},{"location":"api/#get_supported_properties","title":"get_supported_properties()","text":"<pre><code>def get_supported_properties() -&gt; Dict[str, List[str]]\n</code></pre> <p>Get list of all supported CSS properties by category.</p> <p>Returns: Dictionary mapping property categories to property lists</p> <p>Example: <pre><code>properties = st_yled.get_supported_properties()\n\nprint(\"Color properties:\", properties[\"color\"])\n# ['color', 'background_color', 'border_color']\n\nprint(\"Typography properties:\", properties[\"typography\"])\n# ['font_size', 'font_weight', 'font_family', 'line_height']\n\nprint(\"Spacing properties:\", properties[\"spacing\"])\n# ['margin', 'padding', 'margin_top', 'padding_left']\n</code></pre></p>"},{"location":"api/#configuration","title":"Configuration","text":""},{"location":"api/#css-file-loading","title":"CSS File Loading","text":"<p>st_yled automatically looks for CSS files in these locations:</p> <ol> <li><code>.streamlit/st-styled.css</code> (default)</li> <li><code>styles/st-styled.css</code></li> <li><code>css/st-styled.css</code></li> <li>Custom path specified in <code>init()</code></li> </ol> <p>CSS File Format:</p> <pre><code>/* .streamlit/st-styled.css */\n\n/* Global button styles */\n.stButton &gt; button {\n    border-radius: 8px;\n    border: none;\n    font-weight: 600;\n    transition: all 0.3s ease;\n}\n\n/* Global container styles */\n.block-container {\n    padding-top: 2rem;\n    padding-bottom: 2rem;\n}\n\n/* Custom classes */\n.custom-metric {\n    background-color: #f8f9fa;\n    border-left: 4px solid #007bff;\n    padding: 20px;\n}\n</code></pre>"},{"location":"api/#environment-variables","title":"Environment Variables","text":"<p>Configure st_yled behavior with environment variables:</p> <pre><code># CSS file path\nexport ST_STYLED_CSS_PATH=\"path/to/custom.css\"\n\n# Validation mode\nexport ST_STYLED_VALIDATION_MODE=\"permissive\"\n\n# Default theme\nexport ST_STYLED_THEME=\"dark\"\n\n# Enable debug mode\nexport ST_STYLED_DEBUG=\"true\"\n</code></pre> <p>Using in Python:</p> <pre><code>import os\n\nst_yled.init(\n    css_path=os.getenv(\"ST_STYLED_CSS_PATH\"),\n    validation_mode=os.getenv(\"ST_STYLED_VALIDATION_MODE\", \"strict\"),\n    theme=os.getenv(\"ST_STYLED_THEME\")\n)\n</code></pre>"},{"location":"api/#advanced-features","title":"Advanced Features","text":""},{"location":"api/#custom-css-classes","title":"Custom CSS Classes","text":"<p>Apply custom CSS classes to components:</p> <pre><code># Add custom CSS class\nst_yled.text(\n    \"Custom styled text\",\n    css_class=\"my-custom-class\",\n    custom_css=\"\"\"\n    .my-custom-class {\n        background: linear-gradient(45deg, #ff6b6b, #4ecdc4);\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        font-weight: bold;\n    }\n    \"\"\"\n)\n</code></pre>"},{"location":"api/#theme-management","title":"Theme Management","text":"<pre><code># Create custom theme\ncustom_theme = {\n    \"button\": {\n        \"background_color\": \"#6366f1\",\n        \"color\": \"white\",\n        \"border_radius\": \"8px\"\n    },\n    \"text\": {\n        \"color\": \"#1f2937\",\n        \"font_family\": \"Inter, sans-serif\"\n    }\n}\n\n# Apply theme\nst_yled.apply_theme(custom_theme)\n\n# Save theme for reuse\nst_yled.save_theme(\"my_theme\", custom_theme)\n\n# Load saved theme\nst_yled.load_theme(\"my_theme\")\n</code></pre>"},{"location":"api/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Enable performance monitoring\nst_yled.init(debug=True)\n\n# Get performance metrics\nmetrics = st_yled.get_performance_metrics()\nprint(f\"CSS injection time: {metrics['css_injection_time']}ms\")\nprint(f\"Components rendered: {metrics['components_rendered']}\")\nprint(f\"Validation time: {metrics['validation_time']}ms\")\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":""},{"location":"api/#exception-types","title":"Exception Types","text":"<pre><code>from st_yled.exceptions import (\n    ValidationError,\n    ComponentError,\n    CSSError,\n    ThemeError\n)\n\ntry:\n    st_yled.button(\"Test\", color=\"invalid-color\")\nexcept ValidationError as e:\n    st_yled.error(f\"Validation failed: {e}\")\nexcept ComponentError as e:\n    st_yled.error(f\"Component error: {e}\")\n</code></pre>"},{"location":"api/#error-recovery","title":"Error Recovery","text":"<pre><code># Graceful error handling\ndef safe_styling(**kwargs):\n    try:\n        return kwargs\n    except ValidationError:\n        # Return default styling on validation error\n        return {\"background_color\": \"#f8f9fa\", \"color\": \"#2c3e50\"}\n\n# Usage\nbutton_style = safe_styling(\n    background_color=user_selected_color,\n    color=user_selected_text_color\n)\n\nst_yled.button(\"Safe Button\", **button_style)\n</code></pre>"},{"location":"api/#migration-guide","title":"Migration Guide","text":""},{"location":"api/#from-streamlit-to-st_yled","title":"From Streamlit to st_yled","text":"<p>Replace Streamlit components with st_yled equivalents:</p> <pre><code># Before (Streamlit)\nst.title(\"My App\")\nst.button(\"Click me\")\nst.text(\"Some text\")\n\n# After (st_yled)\nst_yled.init()  # Add initialization\nst_yled.title(\"My App\", color=\"#2c3e50\")  # Add styling\nst_yled.button(\"Click me\", background_color=\"#007bff\", color=\"white\")\nst_yled.text(\"Some text\", font_size=\"16px\")\n</code></pre>"},{"location":"api/#version-compatibility","title":"Version Compatibility","text":"<pre><code># Check st_yled version\nimport st_yled\nprint(f\"st_yled version: {st_yled.__version__}\")\n\n# Check compatibility with current Streamlit version\ncompatibility = st_yled.check_compatibility()\nif not compatibility[\"is_compatible\"]:\n    st.warning(f\"Compatibility issue: {compatibility['message']}\")\n</code></pre>"},{"location":"api/#examples-and-best-practices","title":"Examples and Best Practices","text":""},{"location":"api/#component-factory-pattern","title":"Component Factory Pattern","text":"<pre><code>def create_styled_button(text, variant=\"primary\"):\n    \"\"\"Factory function for consistent button styling\"\"\"\n\n    variants = {\n        \"primary\": {\n            \"background_color\": \"#007bff\",\n            \"color\": \"white\"\n        },\n        \"secondary\": {\n            \"background_color\": \"#6c757d\",\n            \"color\": \"white\"\n        },\n        \"success\": {\n            \"background_color\": \"#28a745\",\n            \"color\": \"white\"\n        }\n    }\n\n    style = variants.get(variant, variants[\"primary\"])\n\n    return st_yled.button(\n        text,\n        border_radius=\"6px\",\n        padding=\"10px 20px\",\n        border=\"none\",\n        **style\n    )\n\n# Usage\ncreate_styled_button(\"Save\", \"success\")\ncreate_styled_button(\"Cancel\", \"secondary\")\n</code></pre>"},{"location":"api/#responsive-design-helper","title":"Responsive Design Helper","text":"<pre><code>def responsive_container(**kwargs):\n    \"\"\"Create responsive container with mobile-friendly defaults\"\"\"\n\n    defaults = {\n        \"width\": \"100%\",\n        \"max_width\": \"1200px\",\n        \"margin\": \"0 auto\",\n        \"padding\": \"clamp(16px, 4vw, 32px)\"\n    }\n\n    # Merge user styles with defaults\n    styles = {**defaults, **kwargs}\n\n    return st_yled.container(**styles)\n\n# Usage\nwith responsive_container(background_color=\"white\"):\n    st_yled.title(\"Responsive Content\")\n</code></pre>"},{"location":"api/#next-steps","title":"Next Steps","text":""},{"location":"api/#further-reading","title":"Further Reading","text":"<ul> <li>Component Reference - Detailed component documentation</li> <li>Examples Gallery - Practical usage examples</li> <li>Getting Started Guide - Basic setup and usage</li> </ul>"},{"location":"api/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Custom Theme Development</li> <li>Performance Optimization</li> <li>Integration Patterns</li> </ul>"},{"location":"api/#community-resources","title":"Community Resources","text":"<ul> <li>GitHub Repository - Source code and issues</li> <li>Community Forum - Discussion and support</li> <li>Contributing Guide - How to contribute</li> </ul> <p>API mastery achieved! \ud83d\ude80 You now have complete knowledge of st_yled's capabilities and can build sophisticated, beautifully styled Streamlit applications.</p>"},{"location":"elements/","title":"Elements Overview","text":"<p>st_yled provides enhanced versions of many major Streamlit elements with built-in styling capabilities. Those elements support CSS properties for customization while maintaining full compatibility with their Streamlit equivalents.</p> <p>Below you find an overview of Streamlit elements with styling options</p> <p>FYI: All Streamlit Components can be accessed through the st_yled API, no matter if they can be styled or not.</p> <pre><code># The statements below have the same effect\nst_yled.init()\n\nst.title(\"Hello\")\nst_yled.title(\"Hello\")\n\nst.badge(\"Tag\")\nst_yled.badge(\"Tag\")\n\nst.toast(\"Hooray\")\nst_yled.toast(\"Hooray\")\n</code></pre>"},{"location":"elements/#categories","title":"Categories","text":""},{"location":"elements/#text-elements","title":"\ud83d\udcdd Text Elements","text":"<p>Display and format text, code and formulas with advanced styling options.</p> <p>Available Elements:</p> <ul> <li> <p><code>title</code></p> </li> <li> <p><code>header</code></p> </li> <li> <p><code>subheader</code></p> </li> <li> <p><code>text</code></p> </li> <li> <p><code>markdown</code></p> </li> <li> <p><code>caption</code></p> </li> <li> <p><code>code</code></p> </li> <li> <p><code>latex</code></p> </li> </ul>"},{"location":"elements/#input-elements","title":"\ud83c\udf9b\ufe0f Input Elements","text":"<p>Interactive widgets for user input with enhanced visual styling.</p> <p>Available Elements:</p> <ul> <li> <p><code>button</code></p> </li> <li> <p><code>download_button</code></p> </li> <li> <p><code>link_button</code></p> </li> <li> <p><code>selectbox</code></p> </li> <li> <p><code>radio</code></p> </li> <li> <p><code>multiselect</code></p> </li> <li> <p><code>checkbox</code></p> </li> <li> <p><code>text_input</code></p> </li> <li> <p><code>text_area</code></p> </li> <li> <p><code>number_input</code></p> </li> <li> <p><code>slider</code></p> </li> <li> <p><code>select_slider</code></p> </li> <li> <p><code>date_input</code></p> </li> <li> <p><code>time_input</code></p> </li> <li> <p><code>color_picker</code></p> </li> <li> <p><code>file_uploader</code></p> </li> <li> <p><code>camera_input</code></p> </li> </ul>"},{"location":"elements/#data-elements","title":"\ud83d\udcca Data Elements","text":"<p>Display data and metrics with professional styling options.</p> <p>Available Elements:</p> <ul> <li> <p><code>table</code></p> </li> <li> <p><code>metric</code></p> </li> <li> <p><code>json</code></p> </li> </ul>"},{"location":"elements/#layout-elements","title":"\ud83c\udfd7\ufe0f Layout Elements","text":"<p>Structure your application with styled containers and layout elements.</p> <p>Available Elements:</p> <ul> <li> <p><code>container</code></p> </li> <li> <p><code>expander</code></p> </li> <li> <p><code>tabs</code></p> </li> <li> <p><code>form</code></p> </li> </ul>"},{"location":"elements/#status-elements","title":"\ud83c\udfaf Status Elements","text":"<p>Communicate application state with styled alerts and messages.</p> <p>Available Elements:</p> <ul> <li> <p><code>success</code></p> </li> <li> <p><code>info</code></p> </li> <li> <p><code>warning</code></p> </li> <li> <p><code>error</code></p> </li> <li> <p><code>progress</code></p> </li> </ul>"},{"location":"elements/#component-philosophy","title":"Component Philosophy","text":""},{"location":"elements/#enhanced-not-replaced","title":"Enhanced, Not Replaced","text":"<p>st_yled elements are enhanced versions of Streamlit elements, not replacements:</p> <pre><code># Standard Streamlit\nst.button(\"Click me\")\n\n# Enhanced with st_yled - same functionality + styling\nst_yled.button(\"Click me\", background_color=\"#3498db\", color=\"white\")\n</code></pre>"},{"location":"elements/#backward-compatibility","title":"Backward Compatibility","text":"<p>All st_yled elements accept the same parameters as their Streamlit equivalents:</p> <pre><code># All standard parameters work exactly the same\nst_yled.selectbox(\n    \"Choose option\",\n    [\"A\", \"B\", \"C\"],\n    index=1,\n    help=\"Select an option\",\n    disabled=False,\n    key=\"my_select\"\n)\n\n# Plus additional styling parameters\nst_yled.selectbox(\n    \"Styled option\",\n    [\"A\", \"B\", \"C\"],\n    background_color=\"#f8f9fa\",\n    border_color=\"#007bff\",\n    border_radius=\"8px\"\n)\n</code></pre>"},{"location":"elements/#styling-patterns","title":"Styling Patterns","text":""},{"location":"elements/#individual-component-styling","title":"Individual Component Styling","text":"<p>Style elements individually for specific requirements:</p> <pre><code># Styled title\nst_yled.title(\n    \"Dashboard Overview\",\n    color=\"#2c3e50\",\n    font_size=\"2.5rem\",\n    text_align=\"center\",\n    margin_bottom=\"30px\"\n)\n\n# Styled button with hover effect\nst_yled.button(\n    \"Primary Action\",\n    background_color=\"#007bff\",\n    color=\"white\",\n    border_radius=\"6px\",\n    padding=\"12px 24px\",\n    font_weight=\"bold\"\n)\n</code></pre>"},{"location":"elements/#global-styling","title":"Global Styling","text":"<p>Apply consistent styles across all elements of the same type:</p> <pre><code># Set global button styles\nst_yled.set(\"button\", \"border_radius\", \"8px\")\nst_yled.set(\"button\", \"font_weight\", \"600\")\nst_yled.set(\"button\", \"transition\", \"all 0.3s ease\")\n\n# All buttons will inherit these styles\nst_yled.button(\"Button 1\")  # Automatically styled\nst_yled.button(\"Button 2\")  # Also automatically styled\n</code></pre>"},{"location":"elements/#theme-based-styling","title":"Theme-Based Styling","text":"<p>Create cohesive visual themes:</p> <pre><code># Define theme colors\nPRIMARY = \"#3498db\"\nSECONDARY = \"#2ecc71\"\nBACKGROUND = \"#f8f9fa\"\n\n# Apply theme to multiple elements\nst_yled.header(\"Section Title\", color=PRIMARY)\nst_yled.container(background_color=BACKGROUND, padding=\"20px\")\nst_yled.button(\"Action\", background_color=SECONDARY, color=\"white\")\n</code></pre>"},{"location":"elements/#validation-and-error-handling","title":"Validation and Error Handling","text":""},{"location":"elements/#css-property-validation","title":"CSS Property Validation","text":"<p>st_yled validates all styling properties to prevent errors:</p> <pre><code># \u2705 Valid styling\nst_yled.button(\"Button\", color=\"#3498db\")\n\n# \u274c Invalid styling - helpful error message\nst_yled.button(\"Button\", color=\"invalid-color\")\n# Error: Invalid color value 'invalid-color'. Use hex (#ff0000), rgb(255,0,0), or named colors.\n</code></pre>"},{"location":"elements/#validation-modes","title":"Validation Modes","text":"<p>Control validation behavior based on your needs using environment variables</p> <pre><code># Strict mode (default) - stops on validation errors\nexport ST_STYLED_STRICT_VALIDATION=True\n\n# Bypass mode - no validation (performance optimized)\nexport ST_STYLED_BYPASS_VALIDATION=True\n</code></pre>"},{"location":"elements/#advanced-features","title":"Advanced Features","text":""},{"location":"elements/#component-state-styling","title":"Component State Styling","text":"<p>Style elements differently based on their state:</p> <pre><code># Button states\nif st.session_state.get(\"success\"):\n    st_yled.button(\"Success!\", background_color=\"#28a745\")\nelse:\n    st_yled.button(\"Try Again\", background_color=\"#6c757d\")\n\n# Conditional container styling\nstatus = \"error\" if error_occurred else \"success\"\nbackground = \"#ffe6e6\" if status == \"error\" else \"#e6ffe6\"\n\nst_yled.container(background_color=background, padding=\"15px\")\n</code></pre>"},{"location":"elements/#component-composition","title":"Component Composition","text":"<p>Combine multiple styled elements for complex layouts:</p> <pre><code># Card component composed of multiple st_yled elements\nwith st_yled.container(\n    background_color=\"white\",\n    border_width=\"12px\",\n):\n    st_yled.header(\"Card Title\", color=\"#504c2cff\", text_size=\"16\")\n    st_yled.text(\"Card content with styled text.\", color=\"#51c786ff\")\n</code></pre>"},{"location":"elements/#getting-help","title":"Getting Help","text":""},{"location":"elements/#component-documentation","title":"Component Documentation","text":"<p>Each component category has detailed documentation:</p> <ul> <li>Text Elements - Typography and content display</li> <li>Input Elements - Forms and user interaction</li> <li>Data Elements - Tables, metrics, and data display</li> <li>Layout Elements - Containers and page structure</li> <li>Status Elements - Alerts, progress, and feedback</li> </ul>"},{"location":"elements/#quick-reference","title":"Quick Reference","text":"<ul> <li>API Documentation - Function signatures and parameters</li> </ul> <p>st_yled with \u2764\ufe0f from EVOBYTE</p>"},{"location":"elements/data-elements/","title":"Data Components","text":"<p>Data components are essential for displaying information, metrics, and datasets in your Streamlit applications. st_yled enhances these components with professional styling options for tables, metrics, charts, and data visualization.</p>"},{"location":"elements/data-elements/#available-elements","title":"Available Elements","text":"<ul> <li>table - Static table display with enhanced styling</li> <li>metric - Display key performance indicators with custom styling</li> <li>json - Display JSON data with syntax highlighting and styling</li> </ul>"},{"location":"elements/data-elements/#display-components","title":"Display Components","text":""},{"location":"elements/data-elements/#table","title":"table","text":"<p>Streamlit equivalent: <code>st.table()</code></p> <p>Static table display with enhanced styling.</p> <pre><code>st_yled.table(df, background_color=\"#f8f9fa\", color=\"#2c3e50\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>background_color</code> - Table background color</li> <li><code>color</code> - Text color</li> <li><code>font_size</code> - Text size in cells</li> <li><code>border_style</code> - Border style (solid, dashed, dotted)</li> <li><code>border_color</code> - Border color</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/data-elements/#metrics-and-kpis","title":"Metrics and KPIs","text":""},{"location":"elements/data-elements/#metric","title":"metric","text":"<p>Streamlit equivalent: <code>st.metric()</code></p> <p>Display key performance indicators with custom styling.</p> <pre><code>st_yled.metric(\"Revenue\", \"$12,345\", \"+15%\", color=\"#2c3e50\", font_size=\"18px\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color for label and value</li> <li><code>font_size</code> - Text size for label and value</li> </ul>"},{"location":"elements/data-elements/#data-visualization","title":"Data Visualization","text":""},{"location":"elements/data-elements/#json","title":"json","text":"<p>Streamlit equivalent: <code>st.json()</code></p> <p>Display JSON data with syntax highlighting and styling.</p> <pre><code>data = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\nst_yled.json(data, color=\"#2c3e50\", font_size=\"14px\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color</li> <li><code>font_size</code> - Text size</li> </ul>"},{"location":"elements/data-elements/#next-steps","title":"Next Steps","text":"<p>Continue exploring st_yled components:</p> <ul> <li>Layout Components - Containers and page structure</li> <li>Status Components - Alerts, progress, and feedback</li> </ul> <p>st_yled with \u2764\ufe0f from EVOBYTE</p>"},{"location":"elements/input-elements/","title":"Input Components","text":"<p>Interactive input components allow users to interact with your Streamlit application. st_yled enhances these components with comprehensive styling options while maintaining full functionality and event handling.</p>"},{"location":"elements/input-elements/#available-elements","title":"Available Elements","text":"<ul> <li>button - Interactive buttons with extensive styling and state management</li> <li>download_button - Download buttons with custom styling for file downloads</li> <li>link_button - External link buttons with custom appearance</li> <li>selectbox - Dropdown selection with styling options</li> <li>radio - Radio button groups with custom styling</li> <li>multiselect - Multiple selection component with styling</li> <li>checkbox - Checkbox with custom styling options</li> <li>text_input - Text input fields with comprehensive styling</li> <li>text_area - Multi-line text input with styling options</li> <li>number_input - Numeric input with custom styling</li> <li>slider - Range slider with custom styling</li> <li>select_slider - Selection slider with discrete values</li> <li>date_input - Date picker with styling options</li> <li>time_input - Time picker with custom styling</li> <li>color_picker - Color selection with styling options</li> <li>file_uploader - File upload component with custom styling</li> <li>camera_input - Camera input with styling options</li> </ul>"},{"location":"elements/input-elements/#button-components","title":"Button Components","text":""},{"location":"elements/input-elements/#button","title":"button","text":"<p>Streamlit equivalent: <code>st.button()</code></p> <p>Interactive buttons with extensive styling and state management.</p> <pre><code>clicked = st_yled.button(\"Click Me\", background_color=\"#007bff\", color=\"white\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>background_color</code> - Button background color (hex, rgb, named colors)</li> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color (hex, rgb, named colors)</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul> <p>Button Types:</p> <p>st_yled supports independent styling for different button types by using the <code>type</code> parameter:</p> <ul> <li>Primary buttons (<code>type=\"primary\"</code>) - Main action buttons</li> <li>Secondary buttons (<code>type=\"secondary\"</code>) - Default button style</li> <li>Tertiary buttons (<code>type=\"tertiary\"</code>) - Subtle action buttons</li> </ul> <pre><code># Primary button\nprimary = st_yled.button(\n    \"Primary Action\",\n    type=\"primary\",\n    background_color=\"#007bff\",\n    color=\"white\"\n)\n\n# Secondary button\nsecondary = st_yled.button(\n    \"Secondary Action\",\n    type=\"secondary\",\n    background_color=\"#6c757d\",\n    color=\"white\"\n)\n\n# Tertiary button\ntertiary = st_yled.button(\n    \"Tertiary Action\",\n    type=\"tertiary\",\n    background_color=\"transparent\",\n    color=\"#007bff\"\n)\n</code></pre> <p>For global styling of individual button types use the following accessors</p> <pre><code>st_yled.set(\"button_primary\", \"background_color\", \"lightblue\")\nst_yled.set(\"button_secondary\", \"background_color\", \"lightblue\")\nst_yled.set(\"button_tertiary\", \"background_color\", \"lightblue\")\n</code></pre>"},{"location":"elements/input-elements/#download_button","title":"download_button","text":"<p>Streamlit equivalent: <code>st.download_button()</code></p> <p>Download buttons with custom styling for file downloads.</p> <pre><code>st_yled.download_button(\n    \"\ud83d\udcc4 Download Report\",\n    data=file_data,\n    file_name=\"report.pdf\",\n    background_color=\"#17a2b8\",\n    color=\"white\"\n)\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>background_color</code> - Button background color (hex, rgb, named colors)</li> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color (hex, rgb, named colors)</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul> <p>Button Types:</p> <p>Download buttons support the same type variations as regular buttons:</p> <ul> <li>Primary (<code>type=\"primary\"</code>)</li> <li>Secondary (<code>type=\"secondary\"</code>) - Default</li> <li>Tertiary (<code>type=\"tertiary\"</code>)</li> </ul> <p>For global styling of individual button types use the following accessors</p> <pre><code>st_yled.set(\"download_button_primary\", \"background_color\", \"lightblue\")\nst_yled.set(\"download_button_secondary\", \"background_color\", \"lightblue\")\nst_yled.set(\"download_button_tertiary\", \"background_color\", \"lightblue\")\n</code></pre>"},{"location":"elements/input-elements/#link_button","title":"link_button","text":"<p>Streamlit equivalent: <code>st.link_button()</code></p> <p>External link buttons with custom appearance.</p> <pre><code>st_yled.link_button(\n    \"\ud83d\udd17 Visit Website\",\n    url=\"https://example.com\",\n    background_color=\"#6f42c1\",\n    color=\"white\"\n)\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>background_color</code> - Button background color (hex, rgb, named colors)</li> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color (hex, rgb, named colors)</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul> <p>Button Types:</p> <p>Link buttons support the same type variations as regular buttons:</p> <ul> <li>Primary (<code>type=\"primary\"</code>)</li> <li>Secondary (<code>type=\"secondary\"</code>) - Default</li> <li>Tertiary (<code>type=\"tertiary\"</code>)</li> </ul> <pre><code>st_yled.set(\"link_button_primary\", \"background_color\", \"lightblue\")\nst_yled.set(\"link_button_secondary\", \"background_color\", \"lightblue\")\nst_yled.set(\"link_button_tertiary\", \"background_color\", \"lightblue\")\n</code></pre>"},{"location":"elements/input-elements/#selection-components","title":"Selection Components","text":""},{"location":"elements/input-elements/#selectbox","title":"selectbox","text":"<p>Streamlit equivalent: <code>st.selectbox()</code></p> <p>Dropdown selection with styling options.</p> <pre><code>option = st_yled.selectbox(\n    \"Choose option\",\n    [\"A\", \"B\", \"C\"],\n    background_color=\"#f8f9fa\",\n    border_color=\"#007bff\"\n)\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>background_color</code> - Background color (hex, rgb, named colors)</li> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color (hex, rgb, named colors)</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/input-elements/#radio","title":"radio","text":"<p>Streamlit equivalent: <code>st.radio()</code></p> <p>Radio button groups with custom styling.</p> <pre><code>choice = st_yled.radio(\n    \"Select option\",\n    [\"Option 1\", \"Option 2\", \"Option 3\"],\n    color=\"#007bff\"\n)\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>background_color</code> - Background color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> </ul>"},{"location":"elements/input-elements/#multiselect","title":"multiselect","text":"<p>Streamlit equivalent: <code>st.multiselect()</code></p> <p>Multiple selection component with styling.</p> <pre><code>selections = st_yled.multiselect(\n    \"Choose multiple\",\n    [\"A\", \"B\", \"C\", \"D\"],\n    background_color=\"#ffffff\",\n    border_color=\"#ced4da\"\n)\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>background_color</code> - Background color (hex, rgb, named colors)</li> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color (hex, rgb, named colors)</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/input-elements/#checkbox","title":"checkbox","text":"<p>Streamlit equivalent: <code>st.checkbox()</code></p> <p>Checkbox with custom styling options.</p> <pre><code>enabled = st_yled.checkbox(\n    \"Enable notifications\",\n    color=\"#28a745\",\n    font_size=\"16px\"\n)\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>background_color</code> - Background color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color (hex, rgb, named colors)</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/input-elements/#input-fields","title":"Input Fields","text":""},{"location":"elements/input-elements/#text_input","title":"text_input","text":"<p>Streamlit equivalent: <code>st.text_input()</code></p> <p>Text input fields with comprehensive styling.</p> <pre><code>name = st_yled.text_input(\n    \"Your name\",\n    placeholder=\"Enter your name...\",\n    background_color=\"#f8f9fa\",\n    border_color=\"#007bff\"\n)\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>background_color</code> - Background color (hex, rgb, named colors)</li> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color (hex, rgb, named colors)</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/input-elements/#text_area","title":"text_area","text":"<p>Streamlit equivalent: <code>st.text_area()</code></p> <p>Multi-line text input with styling options.</p> <pre><code>content = st_yled.text_area(\n    \"Your message\",\n    placeholder=\"Type your message here...\",\n    background_color=\"#f8f9fa\",\n    border_color=\"#6c757d\"\n)\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>background_color</code> - Background color (hex, rgb, named colors)</li> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color (hex, rgb, named colors)</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/input-elements/#number_input","title":"number_input","text":"<p>Streamlit equivalent: <code>st.number_input()</code></p> <p>Numeric input with custom styling.</p> <pre><code>value = st_yled.number_input(\n    \"Enter number\",\n    min_value=0,\n    max_value=100,\n    background_color=\"#ffffff\",\n    border_color=\"#17a2b8\"\n)\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>background_color</code> - Background color (hex, rgb, named colors)</li> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color (hex, rgb, named colors)</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/input-elements/#slider-components","title":"Slider Components","text":""},{"location":"elements/input-elements/#slider","title":"slider","text":"<p>Streamlit equivalent: <code>st.slider()</code></p> <p>Range slider with custom styling.</p> <pre><code>value = st_yled.slider(\n    \"Select value\",\n    0, 100, 50,\n    color=\"#007bff\",\n    font_size=\"16px\"\n)\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text and track color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> </ul>"},{"location":"elements/input-elements/#select_slider","title":"select_slider","text":"<p>Streamlit equivalent: <code>st.select_slider()</code></p> <p>Selection slider with discrete values.</p> <pre><code>size = st_yled.select_slider(\n    \"Size\",\n    [\"XS\", \"S\", \"M\", \"L\", \"XL\"],\n    value=\"M\",\n    color=\"#28a745\"\n)\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text and track color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> </ul>"},{"location":"elements/input-elements/#date-and-time-components","title":"Date and Time Components","text":""},{"location":"elements/input-elements/#date_input","title":"date_input","text":"<p>Streamlit equivalent: <code>st.date_input()</code></p> <p>Date picker with styling options.</p> <pre><code>date = st_yled.date_input(\n    \"Select date\",\n    background_color=\"#ffffff\",\n    border_color=\"#007bff\"\n)\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>background_color</code> - Background color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color (hex, rgb, named colors)</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/input-elements/#time_input","title":"time_input","text":"<p>Streamlit equivalent: <code>st.time_input()</code></p> <p>Time picker with custom styling.</p> <pre><code>time = st_yled.time_input(\n    \"Select time\",\n    background_color=\"#ffffff\",\n    border_color=\"#6c757d\"\n)\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>background_color</code> - Background color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color (hex, rgb, named colors)</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/input-elements/#specialized-input-components","title":"Specialized Input Components","text":""},{"location":"elements/input-elements/#color_picker","title":"color_picker","text":"<p>Streamlit equivalent: <code>st.color_picker()</code></p> <p>Color selection with styling options.</p> <pre><code>color = st_yled.color_picker(\n    \"Choose color\",\n    value=\"#FF0000\",\n    color=\"#2c3e50\"\n)\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color (hex, rgb, named colors)</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/input-elements/#file_uploader","title":"file_uploader","text":"<p>Streamlit equivalent: <code>st.file_uploader()</code></p> <p>File upload component with custom styling.</p> <pre><code>file = st_yled.file_uploader(\n    \"Upload file\",\n    type=['csv', 'xlsx'],\n    background_color=\"#f8f9fa\",\n    border_color=\"#6c757d\"\n)\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>background_color</code> - Background color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color (hex, rgb, named colors)</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/input-elements/#camera_input","title":"camera_input","text":"<p>Streamlit equivalent: <code>st.camera_input()</code></p> <p>Camera input with styling options.</p> <pre><code>photo = st_yled.camera_input(\n    \"Take a photo\",\n    color=\"#2c3e50\",\n    border_color=\"#007bff\"\n)\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color (hex, rgb, named colors)</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/input-elements/#next-steps","title":"Next Steps","text":"<p>Continue exploring st_yled components:</p> <ul> <li>Layout Components - Containers and page structure</li> <li>Status Components - Alerts, progress, and feedback</li> </ul> <p>st_yled with \u2764\ufe0f from EVOBYTE</p>"},{"location":"elements/layout-elements/","title":"Layout Components","text":"<p>Layout components provide the structural foundation for your Streamlit applications. st_yled enhances these components with advanced styling options for containers, columns, and organizational elements.</p>"},{"location":"elements/layout-elements/#available-elements","title":"Available Elements","text":"<ul> <li>container - Flexible containers for grouping and styling content sections</li> <li>expander - Collapsible content sections with custom styling</li> <li>tabs - Tabbed interface with custom styling options</li> <li>form - Enhanced forms with styling and layout options</li> </ul>"},{"location":"elements/layout-elements/#container-components","title":"Container Components","text":""},{"location":"elements/layout-elements/#container","title":"container","text":"<p>Streamlit equivalent: <code>st.container()</code></p> <p>Flexible containers for grouping and styling content sections.</p> <pre><code>with st_yled.container(background_color=\"#f8f9fa\", border_color=\"#dee2e6\"):\n    st_yled.text(\"Content inside styled container\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>background_color</code> - Container background color</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/layout-elements/#organizational-components","title":"Organizational Components","text":""},{"location":"elements/layout-elements/#expander","title":"expander","text":"<p>Streamlit equivalent: <code>st.expander()</code></p> <p>Collapsible content sections with custom styling.</p> <pre><code>with st_yled.expander(\"Click to expand\", color=\"#2c3e50\", font_size=\"16px\"):\n    st_yled.text(\"Hidden content here\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color</li> <li><code>font_size</code> - Font size</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/layout-elements/#tabs","title":"tabs","text":"<p>Streamlit equivalent: <code>st.tabs()</code></p> <p>Tabbed interface with custom styling options.</p> <pre><code>tab1, tab2, tab3 = st_yled.tabs([\"Tab 1\", \"Tab 2\", \"Tab 3\"], color=\"#007bff\", font_size=\"16px\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color</li> <li><code>font_size</code> - Font size</li> </ul>"},{"location":"elements/layout-elements/#form-components","title":"Form Components","text":""},{"location":"elements/layout-elements/#form","title":"form","text":"<p>Streamlit equivalent: <code>st.form()</code> with <code>st.form_submit_button()</code></p> <p>Enhanced forms with styling and layout options.</p> <pre><code>with st_yled.form(\"my_form\"):\n    st_yled.text_input(\"Name\")\n    st_yled.form_submit_button(\"Submit\", background_color=\"#007bff\", color=\"white\")\n</code></pre> <p>Form Submit Button Styling Properties:</p> <ul> <li><code>background_color</code> - Button background color</li> <li><code>color</code> - Text color</li> <li><code>font_size</code> - Font size</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/layout-elements/#next-steps","title":"Next Steps","text":"<p>Explore more component categories:</p> <ul> <li>Status Elements - Containers and page structure</li> </ul> <p>Or dive deeper into text styling:</p> <ul> <li>Basic Styling Guide - CSS fundamentals</li> <li>Typography Examples - Real-world text styling patterns</li> </ul> <p>st_yled with \u2764\ufe0f from EVOBYTE</p>"},{"location":"elements/status-elements/","title":"Status Components","text":"<p>Status components communicate application state, provide feedback, and guide users through processes. st_yled enhances these components with comprehensive styling options for alerts, progress indicators, and interactive feedback.</p>"},{"location":"elements/status-elements/#available-elements","title":"Available Elements","text":"<ul> <li>success - Display success messages with custom styling</li> <li>info - Display informational messages with styling options</li> <li>warning - Display warning messages with attention-grabbing styling</li> <li>error - Display error messages with clear, attention-grabbing styling</li> <li>progress - Progress bars with custom styling and colors</li> </ul>"},{"location":"elements/status-elements/#alert-components","title":"Alert Components","text":""},{"location":"elements/status-elements/#success","title":"success","text":"<p>Streamlit equivalent: <code>st.success()</code></p> <p>Display success messages with custom styling.</p> <pre><code>st_yled.success(\"\u2705 Operation completed successfully!\", color=\"#155724\", font_size=\"16px\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color</li> <li><code>font_size</code> - Font size</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/status-elements/#info","title":"info","text":"<p>Streamlit equivalent: <code>st.info()</code></p> <p>Display informational messages with styling options.</p> <pre><code>st_yled.info(\"\u2139\ufe0f This is important information\", color=\"#0c5460\", font_size=\"16px\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color</li> <li><code>font_size</code> - Font size</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/status-elements/#warning","title":"warning","text":"<p>Streamlit equivalent: <code>st.warning()</code></p> <p>Display warning messages with attention-grabbing styling.</p> <pre><code>st_yled.warning(\"\u26a0\ufe0f Please review your input\", color=\"#856404\", font_size=\"16px\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color</li> <li><code>font_size</code> - Font size</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/status-elements/#error","title":"error","text":"<p>Streamlit equivalent: <code>st.error()</code></p> <p>Display error messages with clear, attention-grabbing styling.</p> <pre><code>st_yled.error(\"\u274c An error occurred\", color=\"#721c24\", font_size=\"16px\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color</li> <li><code>font_size</code> - Font size</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul>"},{"location":"elements/status-elements/#progress-components","title":"Progress Components","text":""},{"location":"elements/status-elements/#progress","title":"progress","text":"<p>Streamlit equivalent: <code>st.progress()</code></p> <p>Progress bars with custom styling and colors.</p> <pre><code>progress_bar = st_yled.progress(0.7, background_color=\"#007bff\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>background_color</code> - Progress bar color</li> </ul>"},{"location":"elements/status-elements/#next-steps","title":"Next Steps","text":"<p>Explore more st_yled features:</p> <ul> <li>Basic Styling Guide - CSS fundamentals</li> <li>Typography Examples - Real-world text styling patterns</li> </ul> <p>st_yled with \u2764\ufe0f from EVOBYTE</p>"},{"location":"elements/text-elements/","title":"Text Elements","text":"<p>Text elements are the foundation of content display in Streamlit applications. st_yled enhances these elements with comprehensive typography controls, color options, and layout capabilities.</p>"},{"location":"elements/text-elements/#available-elements","title":"Available Elements","text":"<ul> <li>title - Main page titles</li> <li>header - Section headers</li> <li>subheader - Subsection headers</li> <li>text - General text content</li> <li>markdown - Markdown content with styling</li> <li>caption - Small text and footnotes</li> <li>code - Code display with syntax highlighting</li> <li>latex - Mathematical expressions</li> </ul>"},{"location":"elements/text-elements/#title","title":"title","text":"<p>Streamlit equivalent: <code>st.title()</code></p> <p>Display main page titles with customizable typography and styling.</p> <pre><code>st_yled.title(\"Page Title\",\n            color=\"#2c3e50\",\n            font_size=\"2.5rem\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> </ul> <p></p>"},{"location":"elements/text-elements/#header","title":"header","text":"<p>Streamlit equivalent: <code>st.header()</code></p> <p>Section headers for organizing content with clear visual hierarchy.</p> <pre><code>st_yled.header(\"Section Header\", color=\"#34495e\", font_size=\"2rem\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> </ul> <p></p>"},{"location":"elements/text-elements/#subheader","title":"subheader","text":"<p>Streamlit equivalent: <code>st.subheader()</code></p> <p>Subsection headers for detailed content organization.</p> <pre><code>st_yled.subheader(\"Subsection Title\", color=\"#7f8c8d\", font_size=\"1.3rem\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> </ul> <p></p>"},{"location":"elements/text-elements/#text","title":"text","text":"<p>Streamlit equivalent: <code>st.text()</code> or <code>st.write()</code></p> <p>General text content with comprehensive formatting options.</p> <pre><code>st_yled.text(\"Body text content\", color=\"#2c3e50\", font_size=\"16px\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> </ul> <p></p>"},{"location":"elements/text-elements/#markdown","title":"markdown","text":"<p>Streamlit equivalent: <code>st.markdown()</code></p> <p>Render markdown content with enhanced styling options.</p> <pre><code>st_yled.markdown(\"**Bold text** with *emphasis*\", color=\"#2c3e50\", font_size=\"16px\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> </ul> <p></p>"},{"location":"elements/text-elements/#caption","title":"caption","text":"<p>Streamlit equivalent: <code>st.caption()</code></p> <p>Small text for captions, footnotes, and secondary information.</p> <pre><code>st_yled.caption(\"Figure 1: Sales data over time\", color=\"#6c757d\", font_size=\"12px\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> </ul> <p></p>"},{"location":"elements/text-elements/#code","title":"code","text":"<p>Streamlit equivalent: <code>st.code()</code></p> <p>Display code with syntax highlighting and custom styling.</p> <pre><code>st_yled.code(\"print('Hello, World!')\", language=\"python\",\n             background_color=\"#f8f9fa\", color=\"#2c3e50\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color (hex, rgb, named colors)</li> <li><code>background_color</code> - Background color (hex, rgb, named colors)</li> <li><code>font_size</code> - Font size (px, rem, em, %, or integer as px)</li> <li><code>border_style</code> - Border style (solid, dashed, dotted, none)</li> <li><code>border_color</code> - Border color (hex, rgb, named colors)</li> <li><code>border_width</code> - Border width (px, rem, em, or integer as px)</li> </ul> <p></p>"},{"location":"elements/text-elements/#latex","title":"latex","text":"<p>Streamlit equivalent: <code>st.latex()</code></p> <p>Render mathematical expressions with styling options.</p> <pre><code>st_yled.latex(r\"\\sum_{i=1}^{n} x_i = \\mu\", color=\"#2c3e50\")\n</code></pre> <p>Supported Styling Properties:</p> <ul> <li><code>color</code> - Text color (hex, rgb, named colors)</li> </ul>"},{"location":"elements/text-elements/#next-steps","title":"Next Steps","text":"<p>Explore more component categories:</p> <ul> <li>Input Elements - Interactive form elements with styling</li> <li>Data Elements - Tables, metrics, and data visualization</li> <li>Layout Elements - Containers and page structure</li> </ul> <p>Or dive deeper into text styling:</p> <ul> <li>Basic Styling Guide - CSS fundamentals</li> <li>Typography Examples - Real-world text styling patterns</li> </ul>"},{"location":"examples/","title":"Examples Gallery","text":"<p>Explore practical examples of st_yled in action. From basic styling patterns to complex applications, these examples demonstrate the full capabilities of st_yled for creating beautiful Streamlit applications.</p>"},{"location":"examples/#learning-path","title":"Learning Path","text":""},{"location":"examples/#basic-examples","title":"\ud83c\udf31 Basic Examples","text":"<p>Perfect for beginners - Learn fundamental styling concepts with simple, focused examples.</p> <p>What you'll learn: - Component styling basics - Color and typography application - Simple layout patterns - Global styling introduction</p> <p>Examples included:</p> <ul> <li>Simple Styling - Basic component styling patterns</li> </ul> <p>Time to complete: 30-45 minutes</p>"},{"location":"examples/#advanced-examples","title":"\ud83d\ude80 Advanced Examples","text":"<p>For experienced developers - Complex implementations showcasing advanced st_yled features.</p> <p>What you'll learn: - Complex layout systems - Advanced styling patterns - Performance optimization - Integration with external libraries</p> <p>Examples included: - Dashboard Demo - Professional business dashboard</p> <p>Time to complete: 1-2 hours</p>"},{"location":"examples/#quick-start-examples","title":"Quick Start Examples","text":""},{"location":"examples/#5-minute-quick-wins","title":"5-Minute Quick Wins","text":"<p>Get immediate results with these focused examples:</p> <pre><code># Styled Button Example\nimport st_yled\n\nst_yled.init()\n\n# Create professional buttons instantly\nst_yled.button(\n    \"Primary Action\",\n    background_color=\"#007bff\",\n    color=\"white\",\n    border_width=\"2px\",\n)\n</code></pre> <pre><code># Instant Theme Application\nst_yled.set(\"button\", \"border_radius\", \"8px\")\nst_yled.set(\"text\", \"color\", \"#2c3e50\")\nst_yled.set(\"container\", \"background_color\", \"#f8f9fa\")\n\n# All components now use consistent styling\n</code></pre> <pre><code># Professional Metrics Display\nst_yled.metric(\n    \"Revenue\",\n    \"$45,678\",\n    \"+22%\",\n    background_color=\"white\",\n    border_left=\"4px solid #28a745\",\n    padding=\"20px\",\n    border_radius=\"8px\"\n)\n</code></pre>"},{"location":"examples/#example-categories","title":"Example Categories","text":""},{"location":"examples/#by-difficulty-level","title":"By Difficulty Level","text":"<p>\ud83d\udfe2 Beginner (10-30 minutes) - Component styling basics - Simple color applications - Basic layout patterns</p> <p>\ud83d\udfe1 Intermediate (30-60 minutes) - Global styling systems - Multi-component layouts - Responsive design basics</p> <p>\ud83d\udd34 Advanced (1-3 hours) - Complex dashboard layouts - Custom theming systems - Performance optimization</p>"},{"location":"examples/#by-application-type","title":"By Application Type","text":"<p>\ud83d\udcca Dashboards &amp; Analytics - Executive dashboards - KPI monitoring systems - Data exploration tools - Real-time monitoring</p> <p>\ud83d\udcdd Forms &amp; Data Entry - User registration forms - Survey applications - Data collection interfaces - Validation systems</p> <p>\ud83c\udfa8 Content &amp; Presentation - Documentation sites - Portfolio showcases - Interactive presentations - Educational content</p> <p>\ud83c\udfe2 Business Applications - CRM interfaces - Project management tools - Financial reporting - HR management systems</p>"},{"location":"examples/#interactive-features","title":"Interactive Features","text":""},{"location":"examples/#live-code-playground","title":"Live Code Playground","text":"<p>Many examples include interactive code playgrounds where you can:</p> <ul> <li>Edit code in real-time and see results instantly</li> <li>Experiment with styling by changing parameters</li> <li>Copy code snippets directly to your projects</li> <li>Download complete examples as standalone files</li> </ul>"},{"location":"examples/#beforeafter-comparisons","title":"Before/After Comparisons","text":"<p>See the dramatic difference st_yled makes:</p> Before (Standard Streamlit) After (st_yled Enhanced)"},{"location":"examples/#featured-examples","title":"Featured Examples","text":""},{"location":"examples/#most-popular","title":"\ud83c\udfc6 Most Popular","text":""},{"location":"examples/#professional-dashboard","title":"Professional Dashboard","text":"<p>Complete business dashboard with KPIs, charts, and interactive controls.</p> <p>Highlights: - 15+ styled components - Responsive grid layout - Real-time data updates - Export functionality</p> <p>Technologies: st_yled, Plotly, Pandas</p>"},{"location":"examples/#responsive-form-system","title":"Responsive Form System","text":"<p>Mobile-friendly form with validation and styling.</p> <p>Highlights: - Mobile-first design - Real-time validation - Progressive enhancement - Accessibility features</p> <p>Technologies: st_yled, Custom CSS</p>"},{"location":"examples/#recently-added","title":"\ud83c\udd95 Recently Added","text":""},{"location":"examples/#color-theme-showcase","title":"Color Theme Showcase","text":"<p>Comprehensive demonstration of theming capabilities.</p> <p>Highlights: - 8 pre-built themes - Theme switching - Color palette generator - Export theme code</p>"},{"location":"examples/#data-visualization-gallery","title":"Data Visualization Gallery","text":"<p>Scientific data analysis platform with enhanced charts.</p> <p>Highlights: - Interactive charts - Statistical analysis - Data export options - Collaborative features</p>"},{"location":"examples/#usage-patterns","title":"Usage Patterns","text":""},{"location":"examples/#copy-paste-ready","title":"Copy-Paste Ready","text":"<p>All examples are designed for immediate use:</p> <pre><code># 1. Copy the import\nimport st_yled\n\n# 2. Copy the initialization\nst_yled.init()\n\n# 3. Copy the styled components\nst_yled.button(\"My Button\", background_color=\"#007bff\", color=\"white\")\n</code></pre>"},{"location":"examples/#modular-components","title":"Modular Components","text":"<p>Examples are built with reusable components:</p> <pre><code># Extract reusable patterns\ndef create_metric_card(label, value, delta, color=\"#007bff\"):\n    return st_yled.metric(\n        label, value, delta,\n        background_color=\"white\",\n        border_left=f\"4px solid {color}\",\n        padding=\"20px\",\n        border_radius=\"8px\"\n    )\n\n# Use throughout your app\ncreate_metric_card(\"Sales\", \"$45K\", \"+12%\", \"#28a745\")\ncreate_metric_card(\"Users\", \"1.2K\", \"+8%\", \"#007bff\")\n</code></pre>"},{"location":"examples/#progressive-enhancement","title":"Progressive Enhancement","text":"<p>Start simple and enhance:</p> <pre><code># Step 1: Basic component\nst_yled.button(\"Click me\")\n\n# Step 2: Add styling\nst_yled.button(\"Click me\", background_color=\"#007bff\")\n\n# Step 3: Full enhancement\nst_yled.button(\n    \"Click me\",\n    background_color=\"#007bff\",\n    color=\"white\",\n    border_radius=\"6px\",\n    padding=\"12px 24px\",\n    transition=\"all 0.3s ease\"\n)\n</code></pre>"},{"location":"examples/#getting-help","title":"Getting Help","text":""},{"location":"examples/#example-specific-support","title":"Example-Specific Support","text":"<p>Each example includes:</p> <ul> <li>Prerequisites - What you need to know</li> <li>Step-by-step instructions - Detailed walkthrough</li> <li>Troubleshooting - Common issues and solutions</li> <li>Variations - Ways to customize and extend</li> </ul>"},{"location":"examples/#community-resources","title":"Community Resources","text":"<ul> <li>GitHub Discussions - Q&amp;A and feature requests</li> </ul> <p>st_yled with \u2764\ufe0f from EVOBYTE</p>"},{"location":"examples/advanced-examples/dashboard-demo/","title":"Professional Dashboard Demo","text":"<p>Build a comprehensive business dashboard with st_yled featuring KPIs, charts, interactive controls, and responsive design. This example demonstrates advanced layout patterns and professional styling techniques.</p> <p>Difficulty: \ud83d\udd34 Advanced Time: 2-3 hours Prerequisites: Intermediate st_yled knowledge, basic data analysis concepts</p>"},{"location":"examples/advanced-examples/dashboard-demo/#overview","title":"Overview","text":"<p>In this comprehensive example, you'll build a production-ready business dashboard featuring:</p> <ul> <li>Executive KPI Overview - Key performance indicators with trend analysis</li> <li>Interactive Charts - Sales trends, regional performance, and product analysis</li> <li>Real-time Updates - Live data simulation and refresh capabilities</li> <li>Responsive Design - Mobile-friendly layout that adapts to screen size</li> <li>Export Features - Data export and report generation</li> <li>User Controls - Date ranges, filters, and customization options</li> </ul>"},{"location":"examples/advanced-examples/dashboard-demo/#complete-dashboard-code","title":"Complete Dashboard Code","text":"<pre><code>import streamlit as st\nimport st_yled\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom datetime import datetime, timedelta\nimport time\n\n# ============================================================================\n# Page Configuration and Setup\n# ============================================================================\n\nst.set_page_config(\n    page_title=\"Executive Dashboard\",\n    page_icon=\"\ud83d\udcca\",\n    layout=\"wide\",\n    initial_sidebar_state=\"expanded\"\n)\n\n# Initialize st_yled\nst_yled.init()\n\n# ============================================================================\n# Data Generation (In production, connect to your data sources)\n# ============================================================================\n\n@st.cache_data\ndef load_dashboard_data():\n    \"\"\"Generate sample business data for the dashboard\"\"\"\n\n    # Date range\n    dates = pd.date_range(start='2024-01-01', end='2024-10-16', freq='D')\n\n    # Sales data\n    np.random.seed(42)\n    sales_data = pd.DataFrame({\n        'date': dates,\n        'revenue': np.random.normal(15000, 3000, len(dates)).cumsum(),\n        'orders': np.random.poisson(50, len(dates)),\n        'customers': np.random.poisson(25, len(dates)),\n        'avg_order_value': np.random.normal(300, 50, len(dates))\n    })\n\n    # Regional data\n    regions = ['North', 'South', 'East', 'West', 'Central']\n    regional_data = pd.DataFrame({\n        'region': regions,\n        'revenue': np.random.uniform(100000, 500000, len(regions)),\n        'growth': np.random.uniform(-5, 25, len(regions)),\n        'customers': np.random.randint(500, 2000, len(regions))\n    })\n\n    # Product data\n    products = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\n    product_data = pd.DataFrame({\n        'product': products,\n        'sales': np.random.uniform(50000, 200000, len(products)),\n        'margin': np.random.uniform(15, 35, len(products)),\n        'units_sold': np.random.randint(100, 1000, len(products))\n    })\n\n    return sales_data, regional_data, product_data\n\n# Load data\nsales_df, regional_df, product_df = load_dashboard_data()\n\n# ============================================================================\n# Dashboard Header\n# ============================================================================\n\n# Header container (Note: Limited container styling available)\nwith st_yled.container(\n    background_color=\"white\",\n    border_style=\"solid\",\n    border_color=\"#e9ecef\",\n    border_width=\"2px\"\n):\n    col1, col2, col3 = st.columns([2, 1, 1])\n\n    with col1:\n        st_yled.title(\n            \"\ud83d\udcca Executive Dashboard\",\n            color=\"#2c3e50\",\n            font_size=\"2.2rem\"\n        )\n        st_yled.text(\n            f\"Last updated: {datetime.now().strftime('%B %d, %Y at %H:%M')}\",\n            color=\"#7f8c8d\",\n            font_size=\"14px\"\n        )\n\n    with col2:\n        # Refresh button\n        if st_yled.button(\n            \"\ud83d\udd04 Refresh Data\",\n            background_color=\"#17a2b8\",\n            color=\"white\"\n        ):\n            st.cache_data.clear()\n            st.experimental_rerun()\n\n    with col3:\n        # Export button\n        if st_yled.button(\n            \"\ud83d\udce5 Export Report\",\n            background_color=\"#28a745\",\n            color=\"white\"\n        ):\n            st_yled.success(\"Report exported successfully!\")\n\n# ============================================================================\n# Sidebar Controls\n# ============================================================================\n\nwith st.sidebar:\n    st_yled.header(\"\ud83c\udf9b\ufe0f Dashboard Controls\", color=\"#2c3e50\")\n\n    # Date range selector\n    st_yled.subheader(\"\ud83d\udcc5 Date Range\", color=\"#34495e\")\n\n    date_range = st_yled.date_input(\n        \"Select period\",\n        value=(datetime.now() - timedelta(days=30), datetime.now())\n    )\n\n    # Region filter\n    st_yled.subheader(\"\ud83c\udf0d Region Filter\", color=\"#34495e\")\n    selected_regions = st_yled.multiselect(\n        \"Choose regions\",\n        regional_df['region'].tolist(),\n        default=regional_df['region'].tolist(),\n        background_color=\"#f8f9fa\"\n    )\n\n    # Metric selector\n    st_yled.subheader(\"\ud83d\udcc8 Key Metrics\", color=\"#34495e\")\n    show_revenue = st_yled.checkbox(\"Revenue\", value=True, color=\"#28a745\")\n    show_orders = st_yled.checkbox(\"Orders\", value=True, color=\"#007bff\")\n    show_customers = st_yled.checkbox(\"Customers\", value=True, color=\"#6f42c1\")\n\n    # Dashboard theme\n    st_yled.subheader(\"\ud83c\udfa8 Theme\", color=\"#34495e\")\n    theme = st_yled.selectbox(\n        \"Dashboard theme\",\n        [\"Professional\", \"Dark\", \"Colorful\"],\n        background_color=\"#f8f9fa\"\n    )\n\n# ============================================================================\n# KPI Metrics Row\n# ============================================================================\n\nst_yled.header(\"\ud83d\udcca Key Performance Indicators\", color=\"#2c3e50\")\n\n# Calculate KPIs\ncurrent_revenue = sales_df['revenue'].iloc[-1]\nrevenue_growth = ((sales_df['revenue'].iloc[-1] - sales_df['revenue'].iloc[-30]) / sales_df['revenue'].iloc[-30] * 100)\n\ncurrent_orders = sales_df['orders'].sum()\norders_growth = 12.5  # Simulated\n\ncurrent_customers = sales_df['customers'].sum()\ncustomer_growth = 8.3  # Simulated\n\navg_order_value = current_revenue / current_orders if current_orders &gt; 0 else 0\naov_growth = -2.1  # Simulated\n\n# KPI Cards\ncol1, col2, col3, col4 = st.columns(4)\n\ndef create_kpi_card(title, value, delta, delta_color, background_color, border_color):\n    \"\"\"Create a styled KPI card (Note: Metrics have limited styling)\"\"\"\n    return st_yled.metric(\n        label=title,\n        value=value,\n        delta=delta,\n        color=border_color,\n        font_size=\"16px\"\n    )\n\nwith col1:\n    create_kpi_card(\n        \"Total Revenue\",\n        f\"${current_revenue:,.0f}\",\n        f\"+{revenue_growth:.1f}%\",\n        \"green\",\n        \"white\",\n        \"#28a745\"\n    )\n\nwith col2:\n    create_kpi_card(\n        \"Total Orders\",\n        f\"{current_orders:,}\",\n        f\"+{orders_growth:.1f}%\",\n        \"green\",\n        \"white\",\n        \"#007bff\"\n    )\n\nwith col3:\n    create_kpi_card(\n        \"Total Customers\",\n        f\"{current_customers:,}\",\n        f\"+{customer_growth:.1f}%\",\n        \"green\",\n        \"white\",\n        \"#6f42c1\"\n    )\n\nwith col4:\n    create_kpi_card(\n        \"Avg Order Value\",\n        f\"${avg_order_value:.0f}\",\n        f\"{aov_growth:.1f}%\",\n        \"red\",\n        \"white\",\n        \"#dc3545\"\n    )\n\n# ============================================================================\n# Charts Section\n# ============================================================================\n\n# Revenue Trend Chart\nst_yled.header(\"\ud83d\udcc8 Revenue Trends\", color=\"#2c3e50\")\n\nwith st_yled.container(\n    background_color=\"white\",\n    border_style=\"solid\",\n    border_color=\"#e9ecef\",\n    border_width=\"1px\"\n):\n    # Chart controls\n    col1, col2 = st.columns([3, 1])\n\n    with col2:\n        chart_type = st_yled.selectbox(\n            \"Chart Type\",\n            [\"Line\", \"Area\", \"Bar\"],\n            background_color=\"#f8f9fa\"\n        )\n\n    # Create revenue chart\n    if chart_type == \"Line\":\n        fig = px.line(\n            sales_df.tail(30),\n            x='date',\n            y='revenue',\n            title=\"Daily Revenue (Last 30 Days)\"\n        )\n    elif chart_type == \"Area\":\n        fig = px.area(\n            sales_df.tail(30),\n            x='date',\n            y='revenue',\n            title=\"Daily Revenue (Last 30 Days)\"\n        )\n    else:\n        fig = px.bar(\n            sales_df.tail(30),\n            x='date',\n            y='revenue',\n            title=\"Daily Revenue (Last 30 Days)\"\n        )\n\n    fig.update_layout(\n        plot_bgcolor='rgba(0,0,0,0)',\n        paper_bgcolor='rgba(0,0,0,0)',\n        font=dict(color='#2c3e50'),\n        title_font=dict(size=18, color='#2c3e50')\n    )\n\n    st.plotly_chart(fig, use_container_width=True)\n\n# Regional Performance and Product Analysis\ncol1, col2 = st.columns(2)\n\nwith col1:\n    st_yled.subheader(\"\ud83c\udf0d Regional Performance\", color=\"#2c3e50\")\n\n    with st_yled.container(\n        background_color=\"white\",\n        border_style=\"solid\",\n        border_color=\"#e9ecef\",\n        border_width=\"1px\"\n    ):\n        # Filter data based on selection\n        filtered_regional = regional_df[regional_df['region'].isin(selected_regions)]\n\n        fig_regional = px.bar(\n            filtered_regional,\n            x='region',\n            y='revenue',\n            color='growth',\n            color_continuous_scale='RdYlGn',\n            title=\"Revenue by Region\"\n        )\n\n        fig_regional.update_layout(\n            plot_bgcolor='rgba(0,0,0,0)',\n            paper_bgcolor='rgba(0,0,0,0)',\n            height=400\n        )\n\n        st.plotly_chart(fig_regional, use_container_width=True)\n\nwith col2:\n    st_yled.subheader(\"\ud83d\udce6 Product Performance\", color=\"#2c3e50\")\n\n    with st_yled.container(\n        background_color=\"white\",\n        border_style=\"solid\",\n        border_color=\"#e9ecef\",\n        border_width=\"1px\"\n    ):\n        fig_products = px.scatter(\n            product_df,\n            x='sales',\n            y='margin',\n            size='units_sold',\n            color='product',\n            title=\"Product Sales vs Margin\",\n            hover_data=['units_sold']\n        )\n\n        fig_products.update_layout(\n            plot_bgcolor='rgba(0,0,0,0)',\n            paper_bgcolor='rgba(0,0,0,0)',\n            height=400\n        )\n\n        st.plotly_chart(fig_products, use_container_width=True)\n\n# ============================================================================\n# Data Tables Section\n# ============================================================================\n\nst_yled.header(\"\ud83d\udccb Detailed Data\", color=\"#2c3e50\")\n\n# Tabbed interface for different data views\ntab1, tab2, tab3 = st_yled.tabs(\n    [\"\ud83d\udcc8 Sales Data\", \"\ud83c\udf0d Regional Data\", \"\ud83d\udce6 Product Data\"]\n)\n\nwith tab1:\n    st_yled.subheader(\"Recent Sales Performance\")\n\n    # Display recent sales data (Note: st_yled.dataframe doesn't exist, using st.dataframe)\n    recent_sales = sales_df.tail(10).copy()\n    recent_sales['date'] = recent_sales['date'].dt.strftime('%Y-%m-%d')\n    recent_sales['revenue'] = recent_sales['revenue'].apply(lambda x: f\"${x:,.0f}\")\n    recent_sales['avg_order_value'] = recent_sales['avg_order_value'].apply(lambda x: f\"${x:.0f}\")\n\n    st.dataframe(\n        recent_sales,\n        use_container_width=True\n    )\n\nwith tab2:\n    st_yled.subheader(\"Regional Performance Summary\")\n\n    # Format regional data for display\n    display_regional = filtered_regional.copy()\n    display_regional['revenue'] = display_regional['revenue'].apply(lambda x: f\"${x:,.0f}\")\n    display_regional['growth'] = display_regional['growth'].apply(lambda x: f\"{x:+.1f}%\")\n    display_regional['customers'] = display_regional['customers'].apply(lambda x: f\"{x:,}\")\n\n    st.dataframe(\n        display_regional,\n        use_container_width=True\n    )\n\nwith tab3:\n    st_yled.subheader(\"Product Analysis\")\n\n    # Format product data for display\n    display_products = product_df.copy()\n    display_products['sales'] = display_products['sales'].apply(lambda x: f\"${x:,.0f}\")\n    display_products['margin'] = display_products['margin'].apply(lambda x: f\"{x:.1f}%\")\n    display_products['units_sold'] = display_products['units_sold'].apply(lambda x: f\"{x:,}\")\n\n    st.dataframe(\n        display_products,\n        use_container_width=True\n    )\n\n# ============================================================================\n# Action Items and Alerts\n# ============================================================================\n\nst_yled.header(\"\ud83d\udea8 Action Items &amp; Alerts\", color=\"#2c3e50\")\n\ncol1, col2 = st.columns(2)\n\nwith col1:\n    # Critical alerts (limited container styling)\n    with st_yled.container(\n        background_color=\"#fff5f5\",\n        border_style=\"solid\",\n        border_color=\"#fed7d7\",\n        border_width=\"1px\"\n    ):\n        st_yled.subheader(\"\ud83d\udea8 Critical Alerts\", color=\"#e53e3e\")\n        st_yled.text(\"\u2022 Average order value declining (-2.1%)\", color=\"#744210\")\n        st_yled.text(\"\u2022 West region underperforming target\", color=\"#744210\")\n        st_yled.text(\"\u2022 Product C inventory running low\", color=\"#744210\")\n\nwith col2:\n    # Opportunities\n    with st_yled.container(\n        background_color=\"#f0fff4\",\n        border_style=\"solid\",\n        border_color=\"#9ae6b4\",\n        border_width=\"1px\"\n    ):\n        st_yled.subheader(\"\ud83d\udca1 Opportunities\", color=\"#38a169\")\n        st_yled.text(\"\u2022 Strong growth in North region (+25%)\", color=\"#155724\")\n        st_yled.text(\"\u2022 Product A showing high margins\", color=\"#155724\")\n        st_yled.text(\"\u2022 Customer acquisition trending up\", color=\"#155724\")\n\n# ============================================================================\n# Footer\n# ============================================================================\n\n# Note: st_yled.divider() doesn't exist, using st.divider()\nst.divider()\n\nwith st_yled.container(\n    background_color=\"#f8f9fa\"\n):\n    st_yled.text(\n        \"\ud83d\udcca Executive Dashboard | Built with st_yled | Data refreshed every 15 minutes\",\n        color=\"#6c757d\",\n        font_size=\"14px\"\n    )\n\n    col1, col2, col3 = st.columns(3)\n\n    with col1:\n        st_yled.text(\"\ud83d\udcde Support: support@company.com\", color=\"#6c757d\", font_size=\"12px\")\n\n    with col2:\n        st_yled.text(\"\ud83d\udccb Documentation\", color=\"#6c757d\", font_size=\"12px\")\n\n    with col3:\n        st_yled.text(\"\ud83d\udd12 Privacy Policy\", color=\"#6c757d\", font_size=\"12px\")\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#key-features-breakdown","title":"Key Features Breakdown","text":""},{"location":"examples/advanced-examples/dashboard-demo/#1-responsive-layout-system","title":"1. Responsive Layout System","text":"<pre><code># Adaptive column layouts\ncol1, col2, col3, col4 = st.columns(4)  # Desktop: 4 columns\n# On mobile, automatically stacks vertically\n\n# Container sizing (Note: Limited properties available)\nwith st_yled.container(\n    background_color=\"white\",\n    border_style=\"solid\",\n    border_color=\"#e9ecef\",\n    border_width=\"1px\"\n):\n    # Content adapts to screen size\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#2-professional-kpi-cards","title":"2. Professional KPI Cards","text":"<pre><code>def create_kpi_card(title, value, delta, delta_color, background_color, border_color):\n    \"\"\"Reusable KPI card component (Note: Limited metric styling)\"\"\"\n    return st_yled.metric(\n        label=title,\n        value=value,\n        delta=delta,\n        color=border_color,\n        font_size=\"16px\"\n    )\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#3-interactive-chart-integration","title":"3. Interactive Chart Integration","text":"<pre><code># Plotly chart with st_yled container styling\nwith st_yled.container(\n    background_color=\"white\",\n    border_style=\"solid\",\n    border_color=\"#e9ecef\",\n    border_width=\"1px\"\n):\n    fig = px.line(data, x='date', y='revenue')\n    fig.update_layout(\n        plot_bgcolor='rgba(0,0,0,0)',     # Transparent background\n        paper_bgcolor='rgba(0,0,0,0)',    # Transparent paper\n        font=dict(color='#2c3e50')        # Consistent font color\n    )\n    st.plotly_chart(fig, use_container_width=True)\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#4-advanced-data-tables","title":"4. Advanced Data Tables","text":"<pre><code># Styled data table (Note: st_yled.dataframe doesn't exist, use st.dataframe)\nst.dataframe(\n    formatted_data,\n    use_container_width=True\n)\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#5-status-alerts-system","title":"5. Status Alerts System","text":"<pre><code># Color-coded alert containers (Note: Limited container properties)\nwith st_yled.container(\n    background_color=\"#fff5f5\",        # Light red background\n    border_style=\"solid\",              # Border style\n    border_color=\"#fed7d7\",            # Light red border\n    border_width=\"1px\"                 # Border width\n):\n    st_yled.subheader(\"\ud83d\udea8 Critical Alerts\", color=\"#e53e3e\")\n    # Alert content\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#advanced-techniques-used","title":"Advanced Techniques Used","text":""},{"location":"examples/advanced-examples/dashboard-demo/#1-data-processing-pipeline","title":"1. Data Processing Pipeline","text":"<pre><code>@st.cache_data\ndef load_dashboard_data():\n    \"\"\"Cached data loading for performance\"\"\"\n    # Data generation/loading logic\n    return sales_data, regional_data, product_data\n\n# Efficient data filtering\nfiltered_data = df[df['region'].isin(selected_regions)]\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#2-dynamic-theming","title":"2. Dynamic Theming","text":"<pre><code># Theme-based styling\ntheme_configs = {\n    \"Professional\": {\n        \"primary_color\": \"#2c3e50\",\n        \"accent_color\": \"#3498db\",\n        \"background_color\": \"white\"\n    },\n    \"Dark\": {\n        \"primary_color\": \"#ffffff\",\n        \"accent_color\": \"#64b5f6\",\n        \"background_color\": \"#1e1e1e\"\n    }\n}\n\ncurrent_theme = theme_configs[selected_theme]\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#3-responsive-design-patterns","title":"3. Responsive Design Patterns","text":"<pre><code># Mobile-first responsive containers (Note: Limited properties)\nwith st_yled.container(\n    background_color=\"white\",\n    border_style=\"solid\",\n    border_color=\"#e9ecef\",\n    border_width=\"1px\"\n):\n    # Content automatically adapts\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#4-performance-optimization","title":"4. Performance Optimization","text":"<pre><code># Efficient data caching\n@st.cache_data(ttl=900)  # Cache for 15 minutes\ndef get_analytics_data():\n    # Expensive data operations\n\n# Lazy loading for large datasets\nif st.button(\"Load Detailed Report\"):\n    # Load additional data only when needed\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#customization-options","title":"Customization Options","text":""},{"location":"examples/advanced-examples/dashboard-demo/#1-color-scheme-variants","title":"1. Color Scheme Variants","text":"<pre><code># Corporate theme\nCORPORATE_COLORS = {\n    \"primary\": \"#003366\",\n    \"secondary\": \"#0066cc\",\n    \"success\": \"#28a745\",\n    \"warning\": \"#ffc107\",\n    \"danger\": \"#dc3545\"\n}\n\n# Modern theme\nMODERN_COLORS = {\n    \"primary\": \"#6366f1\",\n    \"secondary\": \"#8b5cf6\",\n    \"success\": \"#10b981\",\n    \"warning\": \"#f59e0b\",\n    \"danger\": \"#ef4444\"\n}\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#2-layout-variations","title":"2. Layout Variations","text":"<pre><code># Sidebar vs top navigation\nif layout_style == \"sidebar\":\n    with st.sidebar:\n        # Navigation controls\nelif layout_style == \"top_nav\":\n    with st_yled.container():\n        # Horizontal navigation\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#3-chart-customizations","title":"3. Chart Customizations","text":"<pre><code># Chart theme variants\ndef apply_chart_theme(fig, theme=\"professional\"):\n    themes = {\n        \"professional\": {\n            \"plot_bgcolor\": \"white\",\n            \"paper_bgcolor\": \"white\",\n            \"font_color\": \"#2c3e50\"\n        },\n        \"dark\": {\n            \"plot_bgcolor\": \"#1e1e1e\",\n            \"paper_bgcolor\": \"#1e1e1e\",\n            \"font_color\": \"#ffffff\"\n        }\n    }\n\n    fig.update_layout(**themes[theme])\n    return fig\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#production-deployment-tips","title":"Production Deployment Tips","text":""},{"location":"examples/advanced-examples/dashboard-demo/#1-performance-optimization","title":"1. Performance Optimization","text":"<pre><code># Use caching strategically\n@st.cache_data(ttl=3600)  # Cache for 1 hour\ndef load_large_dataset():\n    # Heavy data operations\n\n# Optimize data loading\n@st.cache_resource\ndef init_database_connection():\n    # Database connection setup\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#2-error-handling","title":"2. Error Handling","text":"<pre><code>try:\n    data = load_dashboard_data()\nexcept Exception as e:\n    st_yled.error(f\"\u274c Data loading failed: {str(e)}\")\n    st.stop()\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#3-user-authentication","title":"3. User Authentication","text":"<pre><code># Add authentication wrapper\ndef require_auth():\n    if \"authenticated\" not in st.session_state:\n        # Show login form\n        return False\n    return True\n\nif not require_auth():\n    st.stop()\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#4-configuration-management","title":"4. Configuration Management","text":"<pre><code># Environment-based configuration\nimport os\n\nCONFIG = {\n    \"api_url\": os.getenv(\"API_URL\", \"localhost:8000\"),\n    \"refresh_interval\": int(os.getenv(\"REFRESH_INTERVAL\", \"900\")),\n    \"theme\": os.getenv(\"DEFAULT_THEME\", \"professional\")\n}\n</code></pre>"},{"location":"examples/advanced-examples/dashboard-demo/#what-you-learned","title":"What You Learned","text":"<p>\u2705 Advanced Layout Systems - Complex multi-column responsive layouts \u2705 Professional Data Visualization - Integrated charts with custom styling \u2705 Interactive Controls - Dynamic filtering and real-time updates \u2705 KPI Dashboard Design - Professional metric display patterns \u2705 Performance Optimization - Caching and efficient data handling \u2705 Production Patterns - Error handling, authentication, and deployment \u2705 Responsive Design - Mobile-friendly adaptive layouts \u2705 Component Reusability - Modular component design patterns</p>"},{"location":"examples/advanced-examples/dashboard-demo/#next-steps","title":"Next Steps","text":""},{"location":"examples/advanced-examples/dashboard-demo/#extend-this-dashboard","title":"Extend This Dashboard","text":"<ol> <li>Add Real Data Sources - Connect to databases, APIs, or data warehouses</li> <li>Implement User Management - Add authentication and user-specific dashboards</li> <li>Create Export Features - PDF reports, data downloads, scheduled exports</li> <li>Add Real-time Updates - WebSocket connections for live data streams</li> </ol>"},{"location":"examples/advanced-examples/dashboard-demo/#explore-related-examples","title":"Explore Related Examples","text":"<ul> <li>Responsive Design - Mobile-first design patterns</li> <li>Custom Themes - Advanced theming systems</li> <li>Data Analysis Platform - Scientific data applications</li> </ul>"},{"location":"examples/advanced-examples/dashboard-demo/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Multi-page Applications - Navigation and state management</li> <li>Custom Components - Building reusable dashboard widgets</li> <li>Integration Patterns - APIs, databases, and external services</li> </ul> <p>Dashboard mastery achieved! \ud83d\udcca You now have the skills to build production-ready business dashboards with st_yled that rival professional BI tools.</p>"},{"location":"examples/basic-examples/simple-styling/","title":"Simple Styling","text":"<p>Learn the fundamentals of st_yled component styling with practical, easy-to-follow examples. This guide covers basic styling concepts that form the foundation for more advanced applications.</p> <p>Difficulty: \ud83d\udfe2 Beginner Time: 15-20 minutes Prerequisites: Basic Streamlit knowledge</p>"},{"location":"examples/basic-examples/simple-styling/#overview","title":"Overview","text":"<p>In this example, you'll learn how to:</p> <ul> <li>Apply basic styling to common components using available properties</li> <li>Use color properties effectively</li> <li>Control text appearance with font sizing</li> <li>Create visual hierarchy with supported styling options</li> </ul> <p>Important: This example only uses styling properties that are actually available in st_yled. Each component has specific supported properties - refer to the Component Reference for complete details.</p>"},{"location":"examples/basic-examples/simple-styling/#complete-example-code","title":"Complete Example Code","text":"<pre><code>import streamlit as st\nimport st_yled\n\n# Page configuration\nst.set_page_config(page_title=\"Simple Styling Demo\", page_icon=\"\ud83c\udfa8\")\n\n# Initialize st_yled\nst_yled.init()\n\n# ============================================================================\n# Header Section\n# ============================================================================\n\nst_yled.title(\n    \"\ud83c\udfa8 Simple Styling Demo\",\n    color=\"#2c3e50\",\n    font_size=\"2.5rem\"\n)\n\nst_yled.text(\n    \"Learn basic st_yled styling with these simple examples\",\n    color=\"#7f8c8d\",\n    font_size=\"1.2rem\"\n)\n\n# ============================================================================\n# Text Styling Examples\n# ============================================================================\n\nst_yled.header(\"\ud83d\udcdd Text Styling\", color=\"#3498db\")\n\n# Basic text colors\nst_yled.text(\"This is primary text\", color=\"#2c3e50\")\nst_yled.text(\"This is secondary text\", color=\"#7f8c8d\")\nst_yled.text(\"This is success text\", color=\"#27ae60\")\nst_yled.text(\"This is warning text\", color=\"#f39c12\")\nst_yled.text(\"This is error text\", color=\"#e74c3c\")\n\n# Font sizes\nst_yled.subheader(\"Font Sizes\", color=\"#34495e\")\nst_yled.text(\"Large text\", font_size=\"20px\", color=\"#2c3e50\")\nst_yled.text(\"Normal text\", font_size=\"16px\", color=\"#2c3e50\")\nst_yled.text(\"Small text\", font_size=\"14px\", color=\"#2c3e50\")\nst_yled.text(\"Extra small text\", font_size=\"12px\", color=\"#2c3e50\")\n\n# Available text styling (note: font_weight is not supported)\nst_yled.subheader(\"Text Colors\", color=\"#34495e\")\nst_yled.text(\"Dark text\", color=\"#2c3e50\")\nst_yled.text(\"Medium text\", color=\"#7f8c8d\")\nst_yled.text(\"Success text\", color=\"#27ae60\")\nst_yled.text(\"Warning text\", color=\"#f39c12\")\n\n# ============================================================================\n# Button Styling Examples\n# ============================================================================\n\nst_yled.header(\"\ud83d\udd18 Button Styling\", color=\"#9b59b6\")\n\n# Button color variations\ncol1, col2, col3 = st.columns(3)\n\nwith col1:\n    st_yled.button(\n        \"Primary\",\n        background_color=\"#3498db\",\n        color=\"white\"\n    )\n\nwith col2:\n    st_yled.button(\n        \"Success\",\n        background_color=\"#27ae60\",\n        color=\"white\"\n    )\n\nwith col3:\n    st_yled.button(\n        \"Warning\",\n        background_color=\"#f39c12\",\n        color=\"white\"\n    )\n\n# Button size variations\nst_yled.subheader(\"Button Sizes\", color=\"#34495e\")\n\ncol1, col2, col3 = st.columns(3)\n\nwith col1:\n    st_yled.button(\n        \"Small\",\n        background_color=\"#95a5a6\",\n        color=\"white\",\n        font_size=\"12px\"\n    )\n\nwith col2:\n    st_yled.button(\n        \"Medium\",\n        background_color=\"#95a5a6\",\n        color=\"white\",\n        font_size=\"14px\"\n    )\n\nwith col3:\n    st_yled.button(\n        \"Large\",\n        background_color=\"#95a5a6\",\n        color=\"white\",\n        font_size=\"16px\"\n    )\n\n# Button borders (using border properties)\nst_yled.subheader(\"Border Buttons\", color=\"#34495e\")\n\ncol1, col2 = st.columns(2)\n\nwith col1:\n    st_yled.button(\n        \"Border Primary\",\n        background_color=\"white\",\n        color=\"#3498db\",\n        border_style=\"solid\",\n        border_color=\"#3498db\",\n        border_width=\"2px\"\n    )\n\nwith col2:\n    st_yled.button(\n        \"Border Success\",\n        background_color=\"white\",\n        color=\"#27ae60\",\n        border_style=\"solid\",\n        border_color=\"#27ae60\",\n        border_width=\"2px\"\n    )\n\n# ============================================================================\n# Container Styling Examples (Note: Limited styling options available)\n# ============================================================================\n\nst_yled.header(\"\ud83d\udce6 Container Styling\", color=\"#e67e22\")\n\n# Basic container (only background_color and border properties supported)\nwith st_yled.container(\n    background_color=\"#ecf0f1\",\n    border_style=\"solid\",\n    border_color=\"#bdc3c7\",\n    border_width=\"1px\"\n):\n    st_yled.text(\"This is content inside a styled container\", color=\"#2c3e50\")\n    st_yled.text(\"Containers support limited styling properties\", color=\"#7f8c8d\")\n\n# Another container example\nwith st_yled.container(\n    background_color=\"white\",\n    border_style=\"solid\",\n    border_color=\"#e1e8ed\",\n    border_width=\"2px\"\n):\n    st_yled.subheader(\"Container Content\", color=\"#2c3e50\")\n    st_yled.text(\"This container has a white background and border\", color=\"#34495e\")\n    st_yled.button(\"Container Action\", background_color=\"#3498db\", color=\"white\")\n\n# ============================================================================\n# Metric Styling Examples (Note: Only color and font_size supported)\n# ============================================================================\n\nst_yled.header(\"\ud83d\udcca Metric Styling\", color=\"#8e44ad\")\n\n# Metric examples with available styling\ncol1, col2, col3 = st.columns(3)\n\nwith col1:\n    st_yled.metric(\n        \"Total Sales\",\n        \"$12,345\",\n        \"+15%\",\n        color=\"#2c3e50\",\n        font_size=\"16px\"\n    )\n\nwith col2:\n    st_yled.metric(\n        \"New Users\",\n        \"1,234\",\n        \"+8%\",\n        color=\"#27ae60\",\n        font_size=\"18px\"\n    )\n\nwith col3:\n    st_yled.metric(\n        \"Revenue\",\n        \"$45,678\",\n        \"+22%\",\n        color=\"#e67e22\",\n        font_size=\"14px\"\n    )\n\n# ============================================================================\n# Interactive Example\n# ============================================================================\n\nst_yled.header(\"\ud83c\udfae Interactive Example\", color=\"#e74c3c\")\n\n# User inputs for customization\ncol1, col2 = st.columns(2)\n\nwith col1:\n    button_color = st_yled.color_picker(\n        \"Choose button color\",\n        value=\"#3498db\"\n    )\n\n    text_color = st_yled.selectbox(\n        \"Choose text color\",\n        [\"#2c3e50\", \"#e74c3c\", \"#27ae60\", \"#f39c12\"]\n    )\n\nwith col2:\n    border_radius = st_yled.slider(\n        \"Border radius\",\n        0, 20, 6,\n        color=\"#3498db\"\n    )\n\n    padding_size = st_yled.selectbox(\n        \"Padding size\",\n        [\"8px 16px\", \"10px 20px\", \"12px 24px\", \"15px 30px\"]\n    )\n\n# Live preview\nst_yled.subheader(\"Live Preview\", color=\"#34495e\")\n\nst_yled.button(\n    \"Preview Button\",\n    background_color=button_color,\n    color=\"white\",\n    font_size=\"14px\"\n)\n\nst_yled.text(\n    \"This text color changes based on your selection\",\n    color=text_color,\n    font_size=\"16px\"\n)\n\n# ============================================================================\n# Footer\n# ============================================================================\n\n# Note: st_yled.divider() doesn't exist, using regular st.divider() instead\nst.divider()\n\nst_yled.text(\n    \"\ud83c\udf89 Congratulations! You've learned the basics of st_yled styling.\",\n    color=\"#27ae60\",\n    font_size=\"18px\"\n)\n\nst_yled.text(\n    \"Ready for more advanced examples? Check out the Button Gallery and Color Themes!\",\n    color=\"#7f8c8d\"\n)\n</code></pre>"},{"location":"examples/basic-examples/simple-styling/#step-by-step-breakdown","title":"Step-by-Step Breakdown","text":""},{"location":"examples/basic-examples/simple-styling/#1-basic-setup","title":"1. Basic Setup","text":"<pre><code>import streamlit as st\nimport st_yled\n\n# Always initialize st_yled first\nst_yled.init()\n</code></pre> <p>Key concepts: - Import both <code>streamlit</code> and <code>st_yled</code> - Call <code>st_yled.init()</code> before using any styled components - Set page configuration for better presentation</p>"},{"location":"examples/basic-examples/simple-styling/#2-text-styling-fundamentals","title":"2. Text Styling Fundamentals","text":"<pre><code># Different text colors for different purposes\nst_yled.text(\"Primary content\", color=\"#2c3e50\")     # Dark gray\nst_yled.text(\"Secondary info\", color=\"#7f8c8d\")      # Light gray\nst_yled.text(\"Success message\", color=\"#27ae60\")     # Green\nst_yled.text(\"Warning\", color=\"#f39c12\")             # Orange\nst_yled.text(\"Error\", color=\"#e74c3c\")               # Red\n</code></pre> <p>Best practices: - Use consistent colors throughout your app - Choose colors with good contrast for readability - Reserve bright colors for important messages</p>"},{"location":"examples/basic-examples/simple-styling/#3-button-styling-patterns","title":"3. Button Styling Patterns","text":"<pre><code># Primary button pattern\nst_yled.button(\n    \"Action\",\n    background_color=\"#3498db\",  # Blue background\n    color=\"white\",               # White text\n    border_style=\"solid\",        # Border style\n    border_color=\"#3498db\",      # Border color\n    border_width=\"2px\",          # Border width\n    font_size=\"14px\"             # Font size\n)\n</code></pre> <p>Button variations: - Solid buttons - Filled background for primary actions - Border buttons - Use border properties for outlined styles - Size variations - Different font sizes for different button sizes - Color coding - Different colors for different action types</p> <p>Available button properties: - <code>background_color</code> - Button background color - <code>color</code> - Text color - <code>font_size</code> - Text size - <code>border_style</code> - Border style (solid, dashed, etc.) - <code>border_color</code> - Border color - <code>border_width</code> - Border thickness</p>"},{"location":"examples/basic-examples/simple-styling/#4-container-organization","title":"4. Container Organization","text":"<pre><code># Basic container (limited styling options)\nwith st_yled.container(\n    background_color=\"white\",\n    border_style=\"solid\",\n    border_color=\"#e1e8ed\",\n    border_width=\"1px\"\n):\n    # Content goes here\n    st_yled.text(\"Card content\")\n</code></pre> <p>Container purposes: - Organization - Group related content - Visual separation - Create distinct sections using background colors - Emphasis - Highlight important information with borders - Layout control - Structure your app's appearance</p> <p>Available container properties: - <code>background_color</code> - Container background color - <code>border_style</code> - Border style (solid, dashed, etc.) - <code>border_color</code> - Border color - <code>border_width</code> - Border thickness</p>"},{"location":"examples/basic-examples/simple-styling/#5-metric-display","title":"5. Metric Display","text":"<pre><code># Professional metric styling\nst_yled.metric(\n    \"Sales\",                     # Label\n    \"$12,345\",                   # Value\n    \"+15%\",                      # Delta (change)\n    color=\"#2c3e50\",             # Text color\n    font_size=\"16px\"             # Font size\n)\n</code></pre> <p>Metric styling tips: - Use consistent colors across metrics for professional appearance - Adjust font sizes for hierarchy and readability - Color-code based on performance (green=good, red=bad) - Keep styling minimal as metrics have limited style options</p> <p>Available metric properties: - <code>color</code> - Text color for label and value - <code>font_size</code> - Font size for label and value</p>"},{"location":"examples/basic-examples/simple-styling/#what-you-learned","title":"What You Learned","text":"<p>\u2705 Color Application - How to apply colors consistently across components \u2705 Typography Control - Managing font sizes and colors within supported limits \u2705 Button Styling - Creating different button styles using available properties \u2705 Container Usage - Organizing content with basic container styling \u2705 Metric Display - Professional data presentation with color and font control \u2705 Property Limitations - Understanding which CSS properties are actually supported \u2705 Interactive Elements - Combining user input with available styling options</p> <p>Key Takeaway: st_yled provides focused styling capabilities. Each component supports specific CSS properties - always check the Element Reference for available options.</p>"},{"location":"examples/basic-examples/simple-styling/#next-steps","title":"Next Steps","text":"<p>Ready to explore more styling capabilities?</p>"},{"location":"examples/basic-examples/simple-styling/#advanced-learning","title":"Advanced Learning","text":"<ul> <li>Dashboard Demo - Complex layout patterns</li> <li>Global Styling - Consistent styling across your app</li> </ul>"},{"location":"examples/basic-examples/simple-styling/#practice-exercises","title":"Practice Exercises","text":"<p>Try these modifications to reinforce your learning:</p> <ol> <li>Color Experiment - Change all colors to create a dark theme</li> <li>Button Variations - Create 5 different button styles</li> <li>Card Layout - Organize the content into card-based sections</li> <li>Interactive Enhancement - Add more user controls for customization</li> </ol>"},{"location":"examples/basic-examples/simple-styling/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/basic-examples/simple-styling/#common-issues","title":"Common Issues","text":"<p>Colors not showing: - Verify <code>st_yled.init()</code> is called first - Check color format (use hex like <code>#3498db</code>) - Ensure proper string quoting</p> <p>Styling not applying: - Check for typos in property names - Verify component syntax matches examples - Clear browser cache if changes don't appear</p> <p>Layout problems: - Use <code>st.columns()</code> for side-by-side elements - Check container nesting and closing - Verify margin and padding values</p>"},{"location":"examples/basic-examples/simple-styling/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues - Report problems</li> </ul> <p>st_yled with \u2764\ufe0f from EVOBYTE</p>"},{"location":"getting-started/basic-styling/","title":"Basic Styling Concepts","text":"<p>Master the fundamentals of component styling with st_yled. Learn how to apply colors, fonts, spacing, and layouts to create beautiful Streamlit applications.</p>"},{"location":"getting-started/basic-styling/#core-styling-philosophy","title":"Core Styling Philosophy","text":"<p>st_yled follows these key principles:</p> <ul> <li>Intuitive Parameters - Use familiar CSS property names</li> <li>Comprehensive Validation - Prevent styling errors with built-in checks</li> <li>Consistent Behavior - Same styling approach across all components</li> <li>Progressive Enhancement - Start simple, add complexity as needed</li> </ul>"},{"location":"getting-started/basic-styling/#css-property-basics","title":"CSS Property Basics","text":""},{"location":"getting-started/basic-styling/#color-properties","title":"Color Properties","text":"<p>st_yled supports multiple color formats for maximum flexibility:</p> <pre><code># Hex colors (recommended)\nst_yled.title(\"Title\", color=\"#3498db\")\n\n# RGB colors\nst_yled.header(\"Header\", color=\"rgb(52, 152, 219)\")\n\n# Named colors\nst_yled.text(\"Text\", color=\"blue\")\n\n# HSL colors\nst_yled.button(\"Button\", background_color=\"hsl(204, 70%, 53%)\")\n</code></pre> <p>Common Color Properties:</p> <ul> <li> <p><code>color</code> - Text color</p> </li> <li> <p><code>background_color</code> - Background color</p> </li> <li> <p><code>border_color</code> - Border color</p> </li> </ul>"},{"location":"getting-started/basic-styling/#typography-properties","title":"Typography Properties","text":"<p>Control text appearance with typography properties:</p> <pre><code># Font size (pixels, rem, em, %)\nst_yled.title(\"Large Title\", font_size=\"48px\")\nst_yled.header(\"Medium Header\", font_size=\"2rem\")\nst_yled.text(\"Small Text\", font_size=\"0.9em\")\nst_yled.text(\"Very Small Text\", font_size=7) # integer values are interpreted as px\n</code></pre>"},{"location":"getting-started/basic-styling/#border-and-layout-properties","title":"Border and Layout Properties","text":"<p>Add borders, shapes, and positioning:</p> <pre><code># Border properties\nst_yled.container(\n    border_color=\"#e74c3c\",\n    border_style=\"solid\",\n    border_width=\"2px \"\n)\n</code></pre>"},{"location":"getting-started/basic-styling/#component-specific-styling","title":"Component-Specific Styling","text":""},{"location":"getting-started/basic-styling/#text-components","title":"Text Components","text":"<p>Text components support comprehensive typography styling:</p> <pre><code># Title with full styling\nst_yled.title(\n    \"Styled Title\",\n    color=\"#2c3e50\",\n    font_size=\"2.5rem\"\n)\n\n# Paragraph with line spacing\nst_yled.text(\n    \"This is a styled paragraph with custom line height and spacing.\",\n    color=\"#34495e\",\n    font_size=\"16px\",\n)\n</code></pre>"},{"location":"getting-started/basic-styling/#button-components","title":"Button Components","text":"<p>Buttons support interactive and visual styling:</p> <pre><code># Primary button\nst_yled.button(\n    \"Primary Action\",\n    background_color=\"#3498db\",\n    color=\"white\",\n    border_style=\"none\",\n    type=\"primary\"\n)\n\n# Outline button\nst_yled.button(\n    \"Secondary Action\",\n    background_color=\"transparent\",\n    border_color=\"#3498db\",\n    border_width = \"2px\",\n    border_style = \"solid\"\n)\n</code></pre>"},{"location":"getting-started/basic-styling/#container-components","title":"Container Components","text":"<p>Containers support layout and visual grouping:</p> <pre><code># Card-style container\nst_yled.container(\n    background_color=\"white\",\n    border_color=\"#3498db\",\n    border_width = 3,\n    border_style = \"solid\"\n)\n\n# Highlighted container\nst_yled.expander(\n    \"Expandable Section\",\n    background_color=\"#f8f9fa\",\n    border_color=\"#3498db\",\n)\n</code></pre>"},{"location":"getting-started/basic-styling/#validation-system","title":"Validation System","text":"<p>st_yled validates all CSS properties to prevent errors and ensure compatibility:</p>"},{"location":"getting-started/basic-styling/#valid-property-examples","title":"Valid Property Examples","text":"<pre><code># These will work correctly\nst_yled.title(\"Title\", color=\"#3498db\")  # Valid hex color\nst_yled.text(\"Text\", font_size=\"16px\")   # Valid size with unit\nst_yled.button(\"Button\", padding=\"10px\") # Valid padding value\n</code></pre>"},{"location":"getting-started/basic-styling/#validation-errors","title":"Validation Errors","text":"<pre><code># These will show helpful error messages\nst_yled.title(\"Title\", color=\"invalid-color\")  # \u274c Invalid color\nst_yled.text(\"Text\", font_size=\"16\")          # \u274c Missing unit\nst_yled.button(\"Button\", padding=\"invalid\")   # \u274c Invalid padding\n</code></pre>"},{"location":"getting-started/basic-styling/#property-validation-rules","title":"Property Validation Rules","text":"Property Valid Values Examples <code>color</code> Hex, RGB, named colors <code>#ff0000</code>, <code>rgb(255,0,0)</code>, <code>red</code> <code>font_size</code> Size with units <code>16px</code>, <code>1.2rem</code>, <code>100%</code> <code>12</code> (integer interpreted as px) <code>background_color</code> Color values Same as <code>color</code>"},{"location":"getting-started/basic-styling/#best-practices","title":"Best Practices","text":""},{"location":"getting-started/basic-styling/#1-consistent-color-scheme","title":"1. Consistent Color Scheme","text":"<p>Define a color palette and use it consistently:</p> <pre><code># Define your color palette\nPRIMARY_COLOR = \"#3498db\"\nSECONDARY_COLOR = \"#2ecc71\"\nACCENT_COLOR = \"#e74c3c\"\nBACKGROUND_COLOR = \"#f8f9fa\"\nTEXT_COLOR = \"#2c3e50\"\n\n# Use consistently throughout your app\nst_yled.title(\"Title\", color=PRIMARY_COLOR)\nst_yled.button(\"Action\", background_color=SECONDARY_COLOR)\nst_yled.error(\"Error\", color=ACCENT_COLOR)\n</code></pre>"},{"location":"getting-started/basic-styling/#2-typography-hierarchy","title":"2. Typography Hierarchy","text":"<p>Create clear visual hierarchy with consistent font sizes:</p> <pre><code># Typography scale\nFONT_SIZES = {\n    \"hero\": \"3rem\",\n    \"title\": \"2.5rem\",\n    \"header\": \"2rem\",\n    \"subheader\": \"1.5rem\",\n    \"body\": \"1rem\",\n    \"small\": \"0.875rem\"\n}\n\nst_yled.title(\"Main Title\", font_size=FONT_SIZES[\"title\"])\nst_yled.header(\"Section Header\", font_size=FONT_SIZES[\"header\"])\nst_yled.text(\"Body text\", font_size=FONT_SIZES[\"body\"])\n</code></pre>"},{"location":"getting-started/basic-styling/#next-steps","title":"Next Steps","text":"<p>Now that you understand basic styling concepts:</p> <ul> <li>Global Styling Guide - Apply consistent themes across your entire app</li> <li>Component Reference - Explore styling options for specific components</li> <li>Advanced Examples - See complex styling patterns in action</li> </ul> <p>st_yled with \u2764\ufe0f from EVOBYTE</p>"},{"location":"getting-started/first-app/","title":"Your First Styled App","text":"<p>Create a beautiful Streamlit application with st_yled in just 10 minutes. This tutorial will guide you through building a complete app with professional styling.</p>"},{"location":"getting-started/first-app/#what-well-build","title":"What We'll Build","text":"<p>A personal dashboard application featuring:</p> <ul> <li> <p>Styled title and headers</p> </li> <li> <p>Custom button interactions</p> </li> <li> <p>Colorful metrics display</p> </li> <li> <p>Styled sidebar navigation</p> </li> <li> <p>Interactive components with validation</p> </li> </ul>"},{"location":"getting-started/first-app/#step-0-expore-layouts-in-st_yled-studio","title":"Step 0: Expore Layouts in st_yled studio","text":"<p>Visit st_yled studio to easily try out and configure your app styling, which you can export. We will later load it into the example app.</p> <p>Here is the link to st_yled studio</p>"},{"location":"getting-started/first-app/#step-1-create-the-base-app","title":"Step 1: Create the Base App","text":"<p>Create a new file called <code>my_first_app.py</code>:</p> <pre><code>import streamlit as st\nimport st_yled\n\n# Initialize st_yled\nst_yled.init()\n\n# Page configuration\nst.set_page_config(\n    page_title=\"My Styled Dashboard\",\n    page_icon=\"\ud83c\udfa8\",\n    layout=\"wide\"\n)\n\n# App content placeholder\nst_yled.title(\"My First Styled App\")\n</code></pre> <p>Test your app: <pre><code>streamlit run my_first_app.py\n</code></pre></p> <p>You should see a basic Streamlit app with a title.</p> <p>For most elements <code>st_yled.</code> and <code>st.</code> module prefixes can be used interchangably. This means <code>st_yled.title(\"My Title\")</code> and <code>st.title(\"My First Styled App\")</code> will produce the same output, but <code>st_yled.</code> will accept custom styling attributes.</p>"},{"location":"getting-started/first-app/#step-2-add-a-styled-header","title":"Step 2: Add a Styled Header","text":"<p>Replace the title with a styled header section:</p> <pre><code># Styled header section\nst_yled.title(\n    \"\ud83c\udfa8 Personal Dashboard\",\n    color=\"#4b68c8ff\",\n    font_size=\"3rem\"\n)\n\n\nst_yled.chat_input(\"Say hello\", background_color=\"#c9cfe5ff\")\n</code></pre> <p>What's happening here:</p> <ul> <li> <p><code>color=\"#4b68c8ff\"</code> - Dark blue-gray title color</p> </li> <li> <p><code>font_size=\"3rem\"</code> - Makes the title larger</p> </li> <li> <p><code>background_color=\"#c9cfe5ff\"</code> - Change background of chat input</p> </li> </ul>"},{"location":"getting-started/first-app/#step-3-create-a-styled-sidebar","title":"Step 3: Create a Styled Sidebar","text":"<p>Add navigation and controls in the sidebar:</p> <pre><code># Sidebar with styled navigation\nwith st.sidebar:\n    st_yled.header(\"Navigation\", color=\"#e74c3c\")\n\n    # Styled navigation buttons\n    if st_yled.button(\"\ud83d\udcca Dashboard\",\n                      background_color=\"#3498db\",\n                      color=\"white\",\n                      width = 'stretch'):\n        st.session_state.page = \"dashboard\"\n\n    if st_yled.button(\"\u2699\ufe0f Settings\",\n                      background_color=\"#95a5a6\",\n                      color=\"white\",\n                      width = 'stretch'):\n        st.session_state.page = \"settings\"\n\n    if st_yled.button(\"\ud83d\udcc8 Analytics\",\n                      background_color=\"#2ecc71\",\n                      color=\"white\",\n                      width = 'stretch'):\n        st.session_state.page = \"analytics\"\n\n    st_yled.divider()\n\n    # Styled user info\n    st_yled.info(\"\ud83d\udc64 Logged in as: **Demo User**\")\n</code></pre> <p>Key styling concepts:</p> <ul> <li> <p>Different <code>background_color</code> for each button creates visual hierarchy</p> </li> <li> <p><code>width=\"stretch\"</code> makes buttons fill the sidebar width</p> </li> <li> <p>Consistent <code>color=\"white\"</code> for button text readability</p> </li> </ul>"},{"location":"getting-started/first-app/#step-4-interactive-components","title":"Step 4: Interactive Components","text":"<p>Add some interactive styled components:</p> <pre><code>st_yled.header(\"\ud83c\udfae Interactive Controls\", color=\"#8e44ad\")\n\n# Two-column layout for controls\ncol1, col2 = st.columns(2)\n\nwith col1:\n    # Styled selectbox\n    theme = st_yled.selectbox(\n        \"Choose Color Theme\",\n        [\"Blue\", \"Green\", \"Purple\", \"Orange\"],\n        background_color=\"#f8f9fa\",\n        border_color=\"#6c757d\"\n    )\n\n    # Styled slider\n    value = st_yled.slider(\n        \"Adjust Value\",\n        0, 100, 50,\n        color=\"#e74c3c\"\n    )\n\nwith col2:\n    # Styled text input\n    user_input = st_yled.text_input(\n        \"Enter your message\",\n        placeholder=\"Type something...\",\n        border_color=\"#3498db\",\n    )\n\n    # Styled checkbox\n    enabled = st_yled.checkbox(\n        \"Enable notifications\",\n        color=\"#2ecc71\"\n    )\n\n# Display results with styling\nif user_input:\n    st_yled.success(f\"\u2705 You entered: **{user_input}**\")\n\nif enabled:\n    st_yled.info(\"\ud83d\udd14 Notifications are enabled\")\n</code></pre>"},{"location":"getting-started/first-app/#step-6-add-global-styling","title":"Step 6: Add Global Styling","text":"<p>Apply consistent styling across all components on the page. Global styled by <code>st_yled.set</code> will overwrite styling provided by a css file.</p> <pre><code># Initialize st_yled\nst_yled.init()\n\n# Global button styling\nst_yled.set(\"button\", \"border\", \"none\")\nst_yled.set(\"button\", \"font_size\", \"20\")\n\n# Global text styling\nst_yled.set(\"text\", \"color\", \"blue\")\n\n# Global container styling\nst_yled.set(\"container\", \"backgroud_color\", \"grey\")\n</code></pre> <p>Global styling benefits:</p> <ul> <li> <p>Ensures consistent look across all components</p> </li> <li> <p>Easy to change theme by modifying global settings</p> </li> <li> <p>Reduces repetitive styling code</p> </li> </ul>"},{"location":"getting-started/first-app/#what-youve-learned","title":"What You've Learned","text":"<p>\u2705 Basic st_yled setup - Initialize and configure styling</p> <p>\u2705 Component styling - Apply colors, sizes, and spacing</p> <p>\u2705 Global styling - Set consistent themes across components</p> <p>\u2705 Layout techniques - Use columns and containers effectively</p> <p>\u2705 Interactive components - Handle user input with styled widgets</p> <p>\u2705 Sidebar patterns - Apply custom styling to sidebar components</p>"},{"location":"getting-started/first-app/#next-steps","title":"Next Steps","text":"<p>Ready to explore more advanced features?</p> <ul> <li>Basic Styling Concepts - Understand CSS properties and validation</li> <li>Global Styling Guide - Create consistent themes and design systems</li> <li>Component Reference - Explore all available styled components</li> <li>Advanced Examples - Build complex applications</li> </ul> <p>st_yled with \u2764\ufe0f from EVOBYTE</p>"},{"location":"getting-started/global-styling/","title":"Global Styling Guide","text":"<p>Learn how to create consistent themes and design systems across your entire Streamlit application using st_yled's global styling capabilities.</p>"},{"location":"getting-started/global-styling/#what-is-global-styling","title":"What is Global Styling?","text":"<p>Global styling allows you to set default styles for all components of a specific type on an app page. Instead of styling each component individually, you define styles once and they apply automatically throughout your app page.</p> <p>Benefits:</p> <ul> <li> <p>Consistency - Uniform look across all components</p> </li> <li> <p>Efficiency - Set styles once, apply everywhere</p> </li> <li> <p>Maintainability - Easy theme changes and updates</p> </li> <li> <p>Scalability - Perfect for large applications</p> </li> </ul>"},{"location":"getting-started/global-styling/#basic-global-styling","title":"Basic Global Styling","text":""},{"location":"getting-started/global-styling/#setting-global-styles","title":"Setting Global Styles","text":"<p>Use <code>st_yled.set()</code> to apply styles globally to component types:</p> <p>NOTE: Global styling must be applied to each page of your app</p> <pre><code>import st_yled\n\n# Initialize st_yled\nst_yled.init()\n\n# Global button styling\nst_yled.set(\"button\", \"background_color\", \"#3498db\")\nst_yled.set(\"button\", \"color\", \"white\")\nst_yled.set(\"button\", \"border_width\", \"2px\")\nst_yled.set(\"button\", \"border_style\", \"dotted\")\nst_yled.set(\"button\", \"border_color\", \"yellow\")\nst_yled.set(\"button\", \"font_size\", \"20px\")\n\n# Now all buttons will have these styles automatically\nst_yled.button(\"Button 1\")  # Styled with global settings\nst_yled.button(\"Button 2\")  # Also styled with global settings\nst_yled.button(\"Button 3\")  # All buttons look consistent\n</code></pre>"},{"location":"getting-started/global-styling/#available-component-types","title":"Available Component Types","text":"<p>You can set global styles for any st_yled component:</p> <pre><code># Initialize st_yled\nst_yled.init()\n\n# Text components\nst_yled.set(\"title\", \"color\", \"#2c3e50\")\nst_yled.set(\"header\", \"color\", \"#34495e\")\nst_yled.set(\"text\", \"font_size\", \"13px\")\n\n# Input components\nst_yled.set(\"text_input\", \"background_color\", \"f8f9fa\")\nst_yled.set(\"selectbox\", \"background_color\", \"#f8f9fa\")\n\n# Container components\nst_yled.set(\"container\", \"border_width\", \"4px\")\nst_yled.set(\"container\", \"border_color\", \"black\")\nst_yled.set(\"expander\", \"background_color\", \"#f6f6f6\")\n</code></pre>"},{"location":"getting-started/global-styling/#creating-design-systems","title":"Creating Design Systems","text":""},{"location":"getting-started/global-styling/#1-color-theme-system","title":"1. Color Theme System","text":"<p>Define a comprehensive color palette:</p> <pre><code># Define your brand colors\nCOLORS = {\n    \"primary\": \"#3498db\",\n    \"secondary\": \"#2ecc71\",\n    \"accent\": \"#e74c3c\",\n    \"background\": \"#f8f9fa\",\n    \"surface\": \"#ffffff\",\n    \"text_primary\": \"#2c3e50\",\n    \"text_secondary\": \"#7f8c8d\",\n    \"border\": \"#e1e8ed\"\n}\n\n\n\n# Apply color theme globally\ndef apply_color_theme():\n    # Button themes\n    st_yled.set(\"button\", \"background_color\", COLORS[\"primary\"])\n    st_yled.set(\"button\", \"color\", \"white\")\n\n    # Text themes\n    st_yled.set(\"title\", \"color\", COLORS[\"text_primary\"])\n    st_yled.set(\"header\", \"color\", COLORS[\"text_primary\"])\n    st_yled.set(\"text\", \"color\", COLORS[\"text_secondary\"])\n\n    # Container themes\n    st_yled.set(\"container\", \"background_color\", COLORS[\"surface\"])\n    st_yled.set(\"container\", \"border_color\", COLORS[\"border\"])\n\n# Initialize your theme\nst_yled.init()\napply_color_theme()\n</code></pre>"},{"location":"getting-started/global-styling/#theme-variations","title":"Theme Variations","text":""},{"location":"getting-started/global-styling/#light-theme","title":"Light Theme","text":"<pre><code>def apply_light_theme():\n    LIGHT_COLORS = {\n        \"background\": \"#ffffff\",\n        \"surface\": \"#f8f9fa\",\n        \"primary\": \"#007bff\",\n        \"text\": \"#212529\",\n        \"border\": \"#dee2e6\"\n    }\n\n    st_yled.set(\"container\", \"background_color\", LIGHT_COLORS[\"surface\"])\n    st_yled.set(\"text\", \"color\", LIGHT_COLORS[\"text\"])\n    st_yled.set(\"button\", \"background_color\", LIGHT_COLORS[\"primary\"])\n    st_yled.set(\"container\", \"border_color\", LIGHT_COLORS[\"border\"])\n</code></pre>"},{"location":"getting-started/global-styling/#dark-theme","title":"Dark Theme","text":"<pre><code>def apply_dark_theme():\n    DARK_COLORS = {\n        \"background\": \"#1a1a1a\",\n        \"surface\": \"#2d2d2d\",\n        \"primary\": \"#4dabf7\",\n        \"text\": \"#ffffff\",\n        \"text_secondary\": \"#b0b0b0\",\n        \"border\": \"#404040\"\n    }\n\n    st_yled.set(\"container\", \"background_color\", DARK_COLORS[\"surface\"])\n    st_yled.set(\"text\", \"color\", DARK_COLORS[\"text\"])\n    st_yled.set(\"header\", \"color\", DARK_COLORS[\"text\"])\n    st_yled.set(\"title\", \"color\", DARK_COLORS[\"text\"])\n    st_yled.set(\"button\", \"background_color\", DARK_COLORS[\"primary\"])\n    st_yled.set(\"container\", \"border_color\", DARK_COLORS[\"border\"])\n</code></pre>"},{"location":"getting-started/global-styling/#corporate-theme","title":"Corporate Theme","text":"<pre><code>def apply_corporate_theme():\n    CORPORATE_COLORS = {\n        \"primary\": \"#003366\",    # Navy blue\n        \"secondary\": \"#0066cc\",  # Medium blue\n        \"accent\": \"#ff6600\",     # Orange\n        \"background\": \"#f5f5f5\", # Light gray\n        \"text\": \"#333333\"        # Dark gray\n    }\n\n    # Professional button styling\n    st_yled.set(\"button\", \"background_color\", CORPORATE_COLORS[\"primary\"])\n    st_yled.set(\"button\", \"color\", \"white\")\n\n    # Conservative typography\n    st_yled.set(\"title\", \"color\", CORPORATE_COLORS[\"primary\"])\n    st_yled.set(\"text\", \"color\", CORPORATE_COLORS[\"text\"])\n</code></pre>"},{"location":"getting-started/global-styling/#advanced-global-styling","title":"Advanced Global Styling","text":""},{"location":"getting-started/global-styling/#conditional-theme-application","title":"Conditional Theme Application","text":"<p>Apply different themes based on user preferences or app state:</p> <pre><code>def apply_theme(theme_name):\n    \"\"\"Apply theme based on user selection.\"\"\"\n\n    # Reset any existing styles\n    st_yled.reset_global_styles()\n\n    if theme_name == \"light\":\n        apply_light_theme()\n    elif theme_name == \"dark\":\n        apply_dark_theme()\n    elif theme_name == \"corporate\":\n        apply_corporate_theme()\n    else:\n        apply_default_theme()\n\n# Init st_yled\nst_yled.init()\n\n# Usage with user selection\ntheme_choice = st.selectbox(\"Choose Theme\", [\"light\", \"dark\", \"corporate\"])\napply_theme(theme_choice)\n</code></pre>"},{"location":"getting-started/global-styling/#troubleshooting-global-styles","title":"Troubleshooting Global Styles","text":""},{"location":"getting-started/global-styling/#common-issues","title":"Common Issues","text":"<p>Styles not applying: <pre><code># \u274c Forgot to initialize\nst_yled.button(\"Button\")  # No styling\n\n# \u2705 Initialize first\nst_yled.init()\nst_yled.set(\"button\", \"background_color\", \"#3498db\")\nst_yled.button(\"Button\")  # Styled correctly\n</code></pre></p> <p>Individual styles overriding global: <pre><code># Global style\nst_yled.set(\"button\", \"background_color\", \"#3498db\")\n\n# Individual style takes precedence\nst_yled.button(\"Button\", background_color=\"#e74c3c\")  # Red, not blue\n</code></pre></p> <p>CSS specificity conflicts: <pre><code># More specific selectors may be needed\nst_yled.set(\"button\", \"background_color\", \"#3498db !important\")\n</code></pre></p>"},{"location":"getting-started/global-styling/#debugging-tips","title":"Debugging Tips","text":"<pre><code># Check current global styles\ncurrent_styles = st_yled.get_global_styles()\nst.write(current_styles)\n\n# Reset all global styles if needed\nst_yled.reset_global_styles()\n\n# Apply styles step by step to isolate issues\nst_yled.set(\"button\", \"background_color\", \"#3498db\")\n# Test...\nst_yled.set(\"button\", \"border_radius\", \"6px\")\n# Test...\n</code></pre>"},{"location":"getting-started/global-styling/#next-steps","title":"Next Steps","text":"<p>Master global styling and ready for more advanced topics:</p> <ul> <li>Component Reference - Detailed styling options for each component type</li> <li>Advanced Examples - Complex theme implementations</li> <li>API Reference - Complete function documentation for global styling</li> </ul> <p>st_yled with \u2764\ufe0f from EVOBYTE</p>"},{"location":"getting-started/installation/","title":"Installation &amp; Setup","text":"<p>Get st_yled up and running in your Streamlit application in just a few minutes.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+ - st_yled requires modern Python features</li> <li>Streamlit 1.42+ - Latest Streamlit version for optimal compatibility</li> </ul>"},{"location":"getting-started/installation/#installation","title":"Installation","text":""},{"location":"getting-started/installation/#option-1-install-from-pypi-recommended","title":"Option 1: Install from PyPI (Recommended)","text":"<pre><code>pip install st-styled\n</code></pre>"},{"location":"getting-started/installation/#option-3-pip-install-from-github","title":"Option 3: Pip install from GitHub","text":"<pre><code>pip install git+https://github.com/EvobyteDigitalBiology/st-styled\n</code></pre>"},{"location":"getting-started/installation/#option-3-install-from-source","title":"Option 3: Install from source","text":"<pre><code># Clone the repository\ngit clone https://github.com/EvobyteDigitalBiology/st-styled.git\ncd st-styled\n\n# Install in development mode\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>Create a simple test file to verify st_yled is working correctly:</p> <pre><code># test_installation.py\nimport streamlit as st\nimport st_yled\n\nst.title(\"Testing st_yled Installation\")\n\n# Initialize st_yled\nst_yled.init()\n\n# Test basic functionality\nst_yled.success(\"\u2705 st_yled is working correctly!\")\nst_yled.button(\"Test Button\", background_color=\"#4CAF50\", color=\"white\")\n</code></pre> <p>Run the test:</p> <pre><code>streamlit run test_installation.py\n</code></pre> <p>If you see a green success message and a styled button, st_yled is installed correctly!</p>"},{"location":"getting-started/installation/#project-structure-setup","title":"Project Structure Setup","text":"<p>For best results, organize your Streamlit project with st_yled support:</p> <pre><code>your-streamlit-app/\n\u251c\u2500\u2500 .streamlit/\n\u2502   \u251c\u2500\u2500 config.toml          # Streamlit configuration (recommendend)\n\u2502   \u2514\u2500\u2500 st-styled.css        # Your custom CSS (optional)\n\u251c\u2500\u2500 pages/                   # Multi-page app pages\n\u251c\u2500\u2500 requirements.txt         # Python dependencies\n\u251c\u2500\u2500 main.py                 # Main Streamlit app\n\u2514\u2500\u2500 ...                     # Additional folders, files, ...\n</code></pre>"},{"location":"getting-started/installation/#css-file-setup-optional","title":"CSS File Setup (Optional)","text":"<p>The easiest way to define custom css for Streamlit is using st_yled studio, our free app to try and optimize your style and layout.</p> <p>Here is the link to st_yled studio.</p> <p>st_yled will by default load CSS defined in <code>.streamlit/st-styled.css</code> once the <code>st_yled.init()</code> function is called.</p> <p>You can adapt the path of the default css file by providing the path argument <code>st_yled.init('path/to/custom.css')</code></p> <pre><code>/* .streamlit/st-styled.css */\n\n/* Global app styling */\n.main .block-container {\n    padding-top: 2rem;\n    padding-bottom: 2rem;\n}\n\n/* Custom button styles */\n.stButton &gt; button {\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    transition: all 0.3s ease;\n}\n\n.stButton &gt; button:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>Styling not applied to multipage app</p> <ul> <li> <p>Make sure <code>st_yled.init()</code> is run in each app page.</p> </li> <li> <p><code>st_yled.set()</code> must be run on each page where global styling should be applied.</p> </li> </ul> <p>CSS not loading</p> <ul> <li> <p>Verify CSS file path: <code>.streamlit/st-styled.css</code></p> </li> <li> <p>Try manual CSS loading: <code>st_yled.init(css_path=\"path/to/your.css\")</code></p> </li> </ul> <p>ImportError: No module named 'st_yled'</p> <ul> <li> <p>Ensure st_yled is installed: <code>pip list | grep st-styled</code></p> </li> <li> <p>Check you're using the correct Python environment</p> </li> </ul> <p>Components not styling</p> <ul> <li> <p>Ensure <code>st_yled.init()</code> when using custom css from st_yled Studio</p> </li> <li> <p>Check if other css sources are used in your project, which may cause inconsistencies.</p> </li> </ul>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: Report bugs and request features</li> <li>Documentation: Complete API reference</li> <li>Examples: Working code examples</li> </ul>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that st_yled is installed:</p> <ol> <li>Create your first app - Build a simple styled application</li> <li>Learn basic styling - Understand component styling fundamentals</li> <li>Explore global styling - Apply consistent themes across your app</li> </ol> <p>Installation complete! \ud83c\udf89 Ready to build beautiful Streamlit apps with st_yled.</p> <p> </p> <p>st_yled with \u2764\ufe0f from EVOBYTE</p>"}]}